{"version":3,"sources":["webpack:///window.6c7fefca888eb181bc42.bundle.js","webpack:///webpack/bootstrap 6c7fefca888eb181bc42?fae8**","webpack:///./external-window/window.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","convertFloat","val","float","parseFloat","toFixed","toString","replace","getOEEStatusColour","type","brush","blue","red","yellow","green","amber","magenta","purple","getFlow","name","node","i","flows","length","routes","sort","a","b","getBladeColor","blade","value","obj","grey","flow","part","data","valveBladeState","Input","Output","on","on2","getBladeVisibility","direction","visible","forEach","route","index","digitalInput","$$","go","Part","Panel","Viewbox","locationSpot","Spot","Center","width","height","minSize","Size","scale","toolTip","tooltipTemplate","selectionAdorned","selectionObjectName","selectionAdornmentTemplate","selectionAdornment","Binding","Point","parse","makeTwoWay","stringify","Shape","fill","stroke","v","alarm","TextBlock","position","text","editable","textAlign","font","digitalOutput","interlock","angle","findNode","nodes","diagram","model","nodeDataArray","filter","category","findFlow","valve","flowId","findFlowIndex","removeNode","nodeCount","window","splice","loadBackground","canvas","fileType","loadRasterImage","loadVectorImage","loadBlank","img","Image","onload","add","layerName","selectable","pickable","resizable","Picture","desiredSize","element","margin","src","base64","imageSource","baseUrl","path","Date","source","style","backgroundColor","loadNodes","n","addNodeData","_nodeKey","getKeyForNodeData","_node","findPartForKey","loadComments","comments","interruptHandler","setTimeout","isInAlarm","updateTargetBindings","inAlarm","GraphObject","make","Diagram","nodeMap","Map","toolManager","mouseWheelBehavior","ToolManager","WheelZoom","commandHandler","arrowKeyBehavior","allowResize","allowRotate","allowSelect","allowCopy","allowUndo","allowDelete","allowMove","scrollMode","InfiniteScroll","Adornment","off","Brush","Linear","0","1","display","hal","Object","freeze","Closed","strokeWidth","Placeholder","isMultiline","geometryString","figure","substring","dateString","split","year","parseInt","month","day","date","formattedDate","moment","format","alignment","angular","isDate","Node","rotatable","wrap","WrapFit","nodeTemplateMap","addDiagramListener","event","master","subject","nodeData","findNodeDataForKey","key","postMessage","action","parameters","location","href","addEventListener","messageBus","onbeforeunload","$","connection","hub","stop","nodeAdded","push","nodesAdded","nodeRemoved","removeNodeData","flowAdded","valveType","valveId","flowDeleted","flowIndex","routeChanged","change","property","div","children","onresize","innerWidth","innerHeight","requestUpdate","qs","access_token","accessToken","url","start","spikeHub","client","opcDataChange","entityType"],"mappings":"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","file":"window.6c7fefca888eb181bc42.bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/app/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n\t(function () {\r\n\t    'use strict';\r\n\t    \r\n\t    // Private Variables\r\n\t    var $$ = go.GraphObject.make;\r\n\t    var diagram = $$(go.Diagram, 'diagram');\r\n\t    var nodeMap = new go.Map(\"string\", go.Part);\r\n\t   \r\n\t    // Bind mouse wheel as diagram zoom\r\n\t    diagram.toolManager.mouseWheelBehavior = go.ToolManager.WheelZoom;\r\n\t    diagram.commandHandler.arrowKeyBehavior = \"move\";\r\n\t\r\n\t    // Configure read/write permissions\r\n\t    diagram.allowResize = false;\r\n\t    diagram.allowRotate = false;\r\n\t    diagram.allowSelect = true;\r\n\t    diagram.allowCopy = false;\r\n\t    diagram.allowUndo = false;\r\n\t    diagram.allowDelete = false;\r\n\t    diagram.allowMove = false;\r\n\t    diagram.scrollMode = go.Diagram.InfiniteScroll;\r\n\t    \r\n\t    // Tooltip\r\n\t    var tooltipTemplate = $$(go.Adornment, 'Auto',\r\n\t        $$(go.Shape, {fill: '#428FD4'}),\r\n\t        $$(go.TextBlock, {margin: 4}, new go.Binding(\"text\", \"name\"))\r\n\t    );\r\n\t    \r\n\t    // Brushes\r\n\t    var brush = {\r\n\t        off: $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#808080\",\r\n\t            1.0: \"#666666\"\r\n\t        }),\r\n\t        on: $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#44e421\",\r\n\t            1.0: \"#49c12f\"\r\n\t        }),\r\n\t        on2: $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#227210\",\r\n\t            1.0: \"#246017\"\r\n\t        }),\r\n\t        alarm: $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#f21818\",\r\n\t            1.0: \"#f73b3b\"\r\n\t        }),\r\n\t        interlock: $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#f5eb32\",\r\n\t            1.0: \"#fee80b\"\r\n\t        }),\r\n\t        grey: $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#c6d1dd\",\r\n\t            1.0: \"#98a3ae\"\r\n\t        }),\r\n\t        blue: $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#6666FF\",\r\n\t            1.0: \"#6666FF\"\r\n\t        }),\r\n\t        magenta: $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#FF00FF\",\r\n\t            1.0: \"#FF00FF\"\r\n\t        }),\r\n\t        purple: $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#663399\",\r\n\t            1.0: \"#663399\"\r\n\t        }),\r\n\t        yellow: $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#ffff00\",\r\n\t            1.0: \"#ffff19\"\r\n\t        }),\r\n\t        amber: $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#FFBF00\",\r\n\t            1.0: \"#FFBF00\"\r\n\t        }),\r\n\t        display: $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#4D9EFF\",\r\n\t            1.0: \"#4CC4FF\"\r\n\t        }),\r\n\t        hal:  $$(go.Brush, go.Brush.Linear, {\r\n\t            0.0: \"#3D8CD1\",\r\n\t            1.0: \"#2C7EC7\"\r\n\t        })\r\n\t    };\r\n\t    brush.red = brush.alarm;\r\n\t    brush.green = brush.on;\r\n\t\r\n\t    // Valve blade state\r\n\t    var valveBladeState = Object.freeze({\r\n\t        Closed: 'Closed',\r\n\t        Input: 'Input',\r\n\t        Output: 'Output'\r\n\t    });\r\n\t    \r\n\t     // Float value convert\r\n\t    function convertFloat(val) {\r\n\t        var float = parseFloat(parseFloat(val).toFixed(1));\r\n\t        if (float < -999999.9) return '-E';\r\n\t        if (float > 999999.9) return 'E';\r\n\t        else return float.toString().replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n\t    }\r\n\t    \r\n\t    // Get OEE Status colour\r\n\t    function getOEEStatusColour(val, type){\r\n\t        switch(val){\r\n\t            case 'CIP':\r\n\t                return brush.blue;\r\n\t            case 'Fault':\r\n\t                return brush.red;\r\n\t            case 'Maintenance':\r\n\t                return brush.yellow;\r\n\t            case 'Production':\r\n\t                return brush.green;\r\n\t            case 'QA_Held':\r\n\t                return brush.amber;\r\n\t            case 'Setup':\r\n\t                return brush.yellow;\r\n\t            default:\r\n\t                if(type === 'S88Unit')\r\n\t                    return brush.magenta;\r\n\t                return brush.purple;\r\n\t        }\r\n\t    }\r\n\t\r\n\t    // Get valve flow\r\n\t    function getFlow(name, node){\r\n\t        for(var i=0; i<node.flows.length; i++){\r\n\t            if(name === node.flows[i].name){\r\n\t                node.flows[i].routes.sort(function(a, b){ if(a.id > b.id) {return 1;} if(a.id < b.id) {return -1;} return 0;});\r\n\t                return node.flows[i];\r\n\t            }\r\n\t        }\r\n\t        return null;\r\n\t    } \r\n\t\r\n\t    // Get valve blade color for flow\r\n\t    function getBladeColor(blade, value, obj){\r\n\t        if(!value) return brush.grey;\r\n\t        var flow = getFlow(value, obj.part.data);\r\n\t        if(flow && flow.routes.length && (flow.routes[0]['blade'+blade]===valveBladeState.Input||flow.routes[0]['blade'+blade]===valveBladeState.Output))\r\n\t            return brush.on;\r\n\t        if(flow && flow.routes.length > 1 && (flow.routes[1]['blade'+blade]===valveBladeState.Input||flow.routes[1]['blade'+blade]===valveBladeState.Output))\r\n\t            return brush.on2;\r\n\t        return brush.grey;\r\n\t    }\r\n\t\r\n\t    // Get valve blade visibility for flow\r\n\t    function getBladeVisibility(blade, direction, value, obj){\r\n\t        if(!value) return false;\r\n\t        var visible = false;\r\n\t        var flow = getFlow(value, obj.part.data);\r\n\t        if(!flow) return false;\r\n\t        flow.routes.forEach(function(route, index){\r\n\t            if(route['blade'+blade] === direction)\r\n\t                visible = true;\r\n\t        });\r\n\t        return visible;\r\n\t    }\r\n\t    \r\n\t    // Adornments\r\n\t    var selectionAdornment = $$(go.Adornment, \"Auto\", \r\n\t        $$(go.Shape, { \r\n\t            fill: null, \r\n\t            stroke: \"deepskyblue\", \r\n\t            strokeWidth: 1.5\r\n\t        }),\r\n\t        $$(go.Placeholder)\r\n\t    );\r\n\t\r\n\t    /* S88 Model */\r\n\t    // Analogue Input\r\n\t    nodeMap.add(\"AnalogueInputModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"AnalogueInputModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 132,\r\n\t            height: 16,\r\n\t            minSize: new go.Size(33, 4),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: \"AnalogueInputModel\",\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                    position: new go.Point(0, 0),\r\n\t                    fill: brush.grey,\r\n\t                    width: 24,\r\n\t                     height: 16\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(0, 1.6),\r\n\t                text: \"AI\",\r\n\t                font: \"normal normal bold 12.8px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"center\",\r\n\t                editable: false,\r\n\t                width: 24\r\n\t            }),\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                position: new go.Point(24, 0),\r\n\t                fill: brush.display,\r\n\t                width: 108,\r\n\t                height: 16\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(24, 1.6),\r\n\t                    text: \"0.0\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    isMultiline: false,\r\n\t                    textAlign: \"end\",\r\n\t                    width: 60\r\n\t                },\r\n\t                new go.Binding(\"text\", \"value\", convertFloat)\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(85, 1.6),\r\n\t                    text: \"\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    width: 48\r\n\t                },\r\n\t                new go.Binding(\"text\", \"engineeringUnits\", function (v) {\r\n\t                    return v.replace(\"_\", \"/\");\r\n\t                })\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Analogue Output\r\n\t    nodeMap.add(\"AnalogueOutputModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"AnalogueOutputModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 132,\r\n\t            height: 16,\r\n\t            minSize: new go.Size(33, 4),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: \"AnalogueOutputModel\",\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                    position: new go.Point(0, 0),\r\n\t                    fill: brush.grey,\r\n\t                    width: 24,\r\n\t                    height: 16\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(0, 1.6),\r\n\t                text: \"AO\",\r\n\t                font: \"normal normal bold 12.8px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"center\",\r\n\t                editable: false,\r\n\t                width: 24\r\n\t            }),\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                position: new go.Point(24, 0),\r\n\t                fill: brush.display,\r\n\t                width: 108,\r\n\t                height: 16\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(24, 1.6),\r\n\t                    text: \"0.0\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    isMultiline: false,\r\n\t                    textAlign: \"end\",\r\n\t                    width: 60\r\n\t                },\r\n\t                new go.Binding(\"text\", \"value\", convertFloat)\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(85, 1.6),\r\n\t                    text: \"\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    width: 48\r\n\t                },\r\n\t                new go.Binding(\"text\", \"engineeringUnits\", function (v) {\r\n\t                    return v.replace(\"_\", \"/\");\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"rectangle\", {\r\n\t                    fill: brush.interlock,\r\n\t                    stroke: brush.interlock,\r\n\t                    width: 1.6,\r\n\t                    height: 26.4,\r\n\t                    angle: 122,\r\n\t                    visible: true\r\n\t                },\r\n\t                new go.Binding(\"visible\", \"isInterlocked\")\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Control Valve\r\n\t    nodeMap.add(\"ControlValveModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"ControlValveModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 32,\r\n\t            height: 32,\r\n\t            minSize: new go.Size(8, 8),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: \"ControlValveModel\",\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"rectangle\", {\r\n\t                    position: new go.Point(14, 1),\r\n\t                    fill: brush.grey,\r\n\t                    height: 23,\r\n\t                    width: 4,\r\n\t                    stroke: \"black\"\r\n\t                },\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, {\r\n\t                    fill: brush.grey,\r\n\t                    geometryString: \"F M0 4 Q16 -4 31 4 L 0 4\",\r\n\t                    stroke: \"black\"\r\n\t                },\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"triangle\", {\r\n\t                    position: new go.Point(0, 16),\r\n\t                    width: 16,\r\n\t                    height: 16,\r\n\t                    angle: 90,\r\n\t                    fill: brush.grey,\r\n\t                    stroke: \"black\"\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                }),\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"triangle\", {\r\n\t                    position: new go.Point(16, 16),\r\n\t                    width: 16,\r\n\t                    height: 16,\r\n\t                    angle: 270,\r\n\t                    fill: brush.grey,\r\n\t                    stroke: \"black\"\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                }),\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"rectangle\", {\r\n\t                    fill: brush.interlock,\r\n\t                    stroke: brush.interlock,\r\n\t                    width: 2,\r\n\t                    height: 43,\r\n\t                    angle: 135,\r\n\t                    visible: false\r\n\t                },\r\n\t                new go.Binding(\"visible\", \"isInterlocked\")\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Digital Input\r\n\t    function digitalInput(name) {\r\n\t        return $$(go.Part, go.Panel.Viewbox, {\r\n\t                name: name,\r\n\t                locationSpot: go.Spot.Center,\r\n\t                width: 26,\r\n\t                height: 26,\r\n\t                minSize: new go.Size(6.5, 6.5),\r\n\t                scale: 1,\r\n\t                toolTip: tooltipTemplate,\r\n\t                selectionAdorned: true,\r\n\t                selectionObjectName: name,\r\n\t                selectionAdornmentTemplate: selectionAdornment\r\n\t            },\r\n\t            new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t            new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t            new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t            new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t            new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t            $$(go.Panel, \"Position\",\r\n\t                $$(go.Panel, \"Position\",\r\n\t                    $$(go.Shape, \"circle\", {\r\n\t                            fill: brush.grey,\r\n\t                            stroke: \"black\",\r\n\t                            width: 26\r\n\t                        },\r\n\t                        new go.Binding(\"fill\", \"value\", function (v) {\r\n\t                            if (v) return brush.on;\r\n\t                            return brush.grey;\r\n\t                        }),\r\n\t                        new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                            if (v) return brush.alarm;\r\n\t                            return \"black\";\r\n\t                        })\r\n\t                    ),\r\n\t                    $$(go.TextBlock, {\r\n\t                            position: new go.Point(3.5, 3),\r\n\t                            text: \"DI\",\r\n\t                            stroke: \"black\",\r\n\t                            editable: false,\r\n\t                            textAlign: \"center\",\r\n\t                            font: \"normal normal bold 18px sansserif\"\r\n\t                        },\r\n\t                        new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                            if (v) return brush.alarm;\r\n\t                            return \"black\";\r\n\t                        })\r\n\t                    )\r\n\t                )\r\n\t            )\r\n\t        );\r\n\t    }\r\n\t    nodeMap.add(\"DigitalInputModel\", digitalInput(\"DigitalInputModel\"));\r\n\t    nodeMap.add(\"S95DigitalInputModel\", digitalInput(\"S95DigitalInputModel\"));\r\n\t\r\n\t    // Digital Output\r\n\t    function digitalOutput(name) {\r\n\t        return $$(go.Part, go.Panel.Viewbox, {\r\n\t                name: name,\r\n\t                locationSpot: go.Spot.Center,\r\n\t                width: 32,\r\n\t                height: 32,\r\n\t                minSize: new go.Size(8, 8),\r\n\t                scale: 1,\r\n\t                toolTip: tooltipTemplate,\r\n\t                selectionAdorned: true,\r\n\t                selectionObjectName: name,\r\n\t                selectionAdornmentTemplate: selectionAdornment\r\n\t            },\r\n\t            new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t            new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t            new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t            new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t            new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t            $$(go.Panel, \"Position\",\r\n\t                $$(go.Shape, \"Rectangle\", {\r\n\t                        fill: brush.grey,\r\n\t                        stroke: \"black\",\r\n\t                        width: 32,\r\n\t                        height: 32\r\n\t                    },\r\n\t                    new go.Binding(\"fill\", \"value\", function (v) {\r\n\t                        if (v) return brush.on;\r\n\t                        return brush.grey;\r\n\t                    }),\r\n\t                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                        if (v) return brush.alarm;\r\n\t                        return \"black\";\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.TextBlock, {\r\n\t                        position: new go.Point(0.5, 6),\r\n\t                        text: \"DO\",\r\n\t                        stroke: \"black\",\r\n\t                        editable: false,\r\n\t                        textAlign: \"center\",\r\n\t                        font: \"normal normal bold 18px sansserif\",\r\n\t                        width: 32\r\n\t                    },\r\n\t                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                        if (v) return brush.alarm;\r\n\t                        return \"black\";\r\n\t                    })),\r\n\t                $$(go.Shape, \"rectangle\", {\r\n\t                        fill: brush.interlock,\r\n\t                        stroke: brush.interlock,\r\n\t                        width: 2,\r\n\t                        height: 43,\r\n\t                        angle: 135,\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"isInterlocked\")\r\n\t                )\r\n\t            )\r\n\t        );\r\n\t    }\r\n\t    nodeMap.add(\"DigitalOutputModel\", digitalOutput(\"DigitalOutputModel\"));\r\n\t    nodeMap.add(\"S95DigitalOutputModel\", digitalOutput(\"S95DigitalOutputModel\"));\r\n\t\r\n\t    // Flow Meter\r\n\t    nodeMap.add(\"FlowMeterModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"FlowMeterModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 132,\r\n\t            height: 16,\r\n\t            minSize: new go.Size(33, 4),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'FlowMeterModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                    position: new go.Point(0, 0),\r\n\t                    fill: brush.grey,\r\n\t                    width: 24,\r\n\t                    height: 16\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(0, 1.6),\r\n\t                text: \"FL\",\r\n\t                font: \"normal normal bold 12.8px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"center\",\r\n\t                editable: false,\r\n\t                width: 24\r\n\t            }),\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                position: new go.Point(24, 0),\r\n\t                fill: brush.display,\r\n\t                width: 108,\r\n\t                height: 16\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(24, 1.6),\r\n\t                    text: \"0.0\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    isMultiline: false,\r\n\t                    textAlign: \"end\",\r\n\t                    width: 60\r\n\t                },\r\n\t                new go.Binding(\"text\", \"value\", convertFloat)\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(85, 1.6),\r\n\t                    text: \"other\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    width: 48\r\n\t                },\r\n\t                new go.Binding(\"text\", \"engineeringUnits\", function (v) {\r\n\t                    return v.replace(\"_\", \"/\");\r\n\t                })\r\n\t            ))\r\n\t    ));\r\n\t\r\n\t    // Hygienic Status\r\n\t    nodeMap.add(\"HygienicStatusModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"HygienicStatusModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 132,\r\n\t            height: 16,\r\n\t            minSize: new go.Size(33, 4),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'HygienicStatusModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                position: new go.Point(0, 0),\r\n\t                fill: brush.grey,\r\n\t                width: 32,\r\n\t                height: 16\r\n\t            }\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(0, 1.6),\r\n\t                text: \"HYG\",\r\n\t                font: \"normal normal bold 12.8px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"center\",\r\n\t                editable: false,\r\n\t                width: 32\r\n\t            }),\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                position: new go.Point(32, 0),\r\n\t                fill: brush.display,\r\n\t                width: 108,\r\n\t                height: 16\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(32, 1.6),\r\n\t                    width: 96,\r\n\t                    text: \"workCentreOutOfSpec\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    isMultiline: false,\r\n\t                    textAlign: \"center\"\r\n\t                },\r\n\t                new go.Binding(\"text\", \"value\")\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // PID\r\n\t    nodeMap.add(\"PIDModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"PIDModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 86,\r\n\t            height: 48,\r\n\t            minSize: new go.Size(21.5, 12),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'PIDModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t                $$(go.Shape, \"Rectangle\", {\r\n\t                    position: new go.Point(24, 0),\r\n\t                    fill: brush.display,\r\n\t                    width: 62,\r\n\t                    height: 48\r\n\t                }),\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                    position: new go.Point(0, 0),\r\n\t                    fill: brush.grey,\r\n\t                    width: 24,\r\n\t                    height: 16\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isControlling\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(0, 1.6),\r\n\t                text: \"PV\",\r\n\t                font: \"normal normal bold 12.8px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"center\",\r\n\t                editable: false,\r\n\t                width: 24\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(24, 1.6),\r\n\t                    text: \"0.0\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    isMultiline: false,\r\n\t                    textAlign: \"end\",\r\n\t                    width: 60\r\n\t                },\r\n\t                new go.Binding(\"text\", \"processVariable\", convertFloat)\r\n\t            ),\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                    position: new go.Point(0, 16),\r\n\t                    fill: brush.grey,\r\n\t                    width: 24,\r\n\t                    height: 16\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isControlling\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(0, 17.6),\r\n\t                text: \"SP\",\r\n\t                font: \"normal normal bold 12.8px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"center\",\r\n\t                editable: false,\r\n\t                width: 24\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(24, 17.6),\r\n\t                    text: \"0.0\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    isMultiline: false,\r\n\t                    textAlign: \"end\",\r\n\t                    width: 60\r\n\t                },\r\n\t                new go.Binding(\"text\", \"setPoint\", convertFloat)\r\n\t            ),\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                    position: new go.Point(0, 32),\r\n\t                    fill: brush.grey,\r\n\t                    width: 24,\r\n\t                    height: 16\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isControlling\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(0, 33.6),\r\n\t                text: \"OP\",\r\n\t                font: \"normal normal bold 12.8px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"center\",\r\n\t                editable: false,\r\n\t                width: 24\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(24, 33.6),\r\n\t                    text: \"0.0\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    isMultiline: false,\r\n\t                    textAlign: \"end\",\r\n\t                    width: 60\r\n\t                },\r\n\t                new go.Binding(\"text\", \"output\", convertFloat)\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Portable Tank\r\n\t    nodeMap.add(\"PortableTankModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"PortableTankModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 32,\r\n\t            height: 38,\r\n\t            minSize: new go.Size(8, 9.5),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'PortableTankModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Circle\", {\r\n\t                position: new go.Point(2, 30),\r\n\t                fill: \"black\",\r\n\t                stroke: \"black\",\r\n\t                width: 8,\r\n\t                height: 8\r\n\t            }),\r\n\t            $$(go.Shape, \"Circle\", {\r\n\t                position: new go.Point(4, 32),\r\n\t                fill: brush.grey,\r\n\t                stroke: \"black\",\r\n\t                width: 4,\r\n\t                height: 4\r\n\t            }),\r\n\t            $$(go.Shape, \"Circle\", {\r\n\t                position: new go.Point(22, 30),\r\n\t                fill: \"black\",\r\n\t                stroke: \"black\",\r\n\t                width: 8,\r\n\t                height: 8\r\n\t            }),\r\n\t            $$(go.Shape, \"Circle\", {\r\n\t                position: new go.Point(24, 32),\r\n\t                fill: brush.grey,\r\n\t                stroke: \"black\",\r\n\t                width: 4,\r\n\t                height: 4\r\n\t            }),\r\n\t            $$(go.Shape, {\r\n\t                figure: \"Cylinder1\",\r\n\t                fill: brush.grey,\r\n\t                stroke: \"black\",\r\n\t                width: 32,\r\n\t                height: 32\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(0.8, 7),\r\n\t                text: \"PT\",\r\n\t                font: \"normal normal bold 12px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"center\",\r\n\t                editable: false,\r\n\t                width: 32\r\n\t            }),\r\n\t            $$(go.Shape, \"Ellipse\", {\r\n\t                    position: new go.Point(13.5, 18),\r\n\t                    fill: \"black\",\r\n\t                    stroke: \"black\",\r\n\t                    width: 5,\r\n\t                    height: 5,\r\n\t                    visible: false\r\n\t                },\r\n\t                new go.Binding(\"visible\", \"value\", function (v) {\r\n\t                    if (v === \"Docked\" || v === \"CleaningStationDocked\" || v === \"TubeSetConnected\") return true;\r\n\t                    return false;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"Triangle\", {\r\n\t                    position: new go.Point(13.5, 20),\r\n\t                    fill: \"black\",\r\n\t                    stroke: \"black\",\r\n\t                    width: 5,\r\n\t                    height: 8,\r\n\t                    visible: false\r\n\t                },\r\n\t                new go.Binding(\"visible\", \"value\", function (v) {\r\n\t                    if (v === \"Docked\" || v === \"CleaningStationDocked\" || v === \"TubeSetConnected\") return true;\r\n\t                    return false;\r\n\t                })\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Single Use Container\r\n\t    nodeMap.add(\"SingleUseContainerModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"SingleUseContainerModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 32,\r\n\t            height: 40,\r\n\t            minSize: new go.Size(8, 9.5),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'SingleUseContainerModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Circle\", {\r\n\t                position: new go.Point(4, 31),\r\n\t                fill: \"black\",\r\n\t                stroke: \"black\",\r\n\t                width: 8,\r\n\t                height: 8\r\n\t            }),\r\n\t            $$(go.Shape, \"Circle\", {\r\n\t                position: new go.Point(6, 33),\r\n\t                fill: brush.grey,\r\n\t                stroke: \"black\",\r\n\t                width: 4,\r\n\t                height: 4\r\n\t            }),\r\n\t            $$(go.Shape, \"Circle\", {\r\n\t                position: new go.Point(20, 31),\r\n\t                fill: \"black\",\r\n\t                stroke: \"black\",\r\n\t                width: 8,\r\n\t                height: 8\r\n\t            }),\r\n\t            $$(go.Shape, \"Circle\", {\r\n\t                position: new go.Point(22, 33),\r\n\t                fill: brush.grey,\r\n\t                stroke: \"black\",\r\n\t                width: 4,\r\n\t                height: 4\r\n\t            }),\r\n\t            $$(go.Shape, {\r\n\t                    figure: \"ManualOperation\",\r\n\t                    fill: brush.grey,\r\n\t                    stroke: \"black\",\r\n\t                    width: 32,\r\n\t                    height: 32\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"singleUseStatus\", function (v) {\r\n\t                    switch (v) {\r\n\t                        case \"BagSetup\":\r\n\t                        case \"BagDisposal\":\r\n\t                        case \"ProbeInstall\":\r\n\t                        case \"TubeSetInstall\":\r\n\t                            return brush.yellow;\r\n\t                        case \"InUse\":\r\n\t                            return brush.green;\r\n\t                        case \"Dirty\":\r\n\t                            return brush.red;\r\n\t                        case \"QA_Held\":\r\n\t                            return brush.amber;\r\n\t                        default:\r\n\t                            return brush.grey;\r\n\t                    }\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(0.8, 0.5),\r\n\t                text: \"SU\",\r\n\t                font: \"normal normal bold 12px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"center\",\r\n\t                editable: false,\r\n\t                width: 32\r\n\t            }),\r\n\t            $$(go.Shape, \"Ellipse\", {\r\n\t                    position: new go.Point(13, 14),\r\n\t                    fill: \"black\",\r\n\t                    stroke: \"black\",\r\n\t                    width: 6,\r\n\t                    height: 6,\r\n\t                    visible: false\r\n\t                },\r\n\t                new go.Binding(\"visible\", \"value\", function (v) {\r\n\t                    if (v === \"Docked\" || v === \"CleaningStationDocked\" || v === \"TubeSetConnected\") return true;\r\n\t                    return false;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"Triangle\", {\r\n\t                    position: new go.Point(12, 16),\r\n\t                    fill: \"black\",\r\n\t                    stroke: \"black\",\r\n\t                    width: 8,\r\n\t                    height: 12,\r\n\t                    visible: false\r\n\t                },\r\n\t                new go.Binding(\"visible\", \"value\", function (v) {\r\n\t                    if (v === \"Docked\" || v === \"CleaningStationDocked\" || v === \"TubeSetConnected\") return true;\r\n\t                    return false;\r\n\t                })\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Pump\r\n\t    nodeMap.add(\"PumpModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"PumpModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 32,\r\n\t            height: 32,\r\n\t            minSize: new go.Size(8, 8),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'PumpModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"circle\", {\r\n\t                    fill: brush.grey,\r\n\t                    visible: true,\r\n\t                    stroke: \"black\",\r\n\t                    width: 32\r\n\t                },\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"triangle\", {\r\n\t                    position: new go.Point(8, 7),\r\n\t                    stroke: \"black\",\r\n\t                    fill: brush.off,\r\n\t                    width: 18,\r\n\t                    height: 18,\r\n\t                    angle: 90,\r\n\t                    visible: true\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isRunning\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.off;\r\n\t                }),\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"rectangle\", {\r\n\t                    fill: brush.interlock,\r\n\t                    stroke: brush.interlock,\r\n\t                    width: 2,\r\n\t                    height: 42,\r\n\t                    angle: 135,\r\n\t                    visible: false\r\n\t                },\r\n\t                new go.Binding(\"visible\", \"isInterlocked\")\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Single Speed Motor\r\n\t    nodeMap.add(\"SingleSpeedMotorModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"SingleSpeedMotorModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 32,\r\n\t            height: 32,\r\n\t            minSize: new go.Size(8, 8),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'SingleSpeedMotorModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"circle\", {\r\n\t                    fill: brush.grey,\r\n\t                    visible: true,\r\n\t                    stroke: \"black\",\r\n\t                    width: 32\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isRunning\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                }),\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(0.3, 6),\r\n\t                    text: \"M\",\r\n\t                    font: \"normal normal bold 18px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    width: 32\r\n\t                },\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"rectangle\", {\r\n\t                    fill: brush.interlock,\r\n\t                    stroke: brush.interlock,\r\n\t                    width: 2,\r\n\t                    height: 42,\r\n\t                    angle: 135,\r\n\t                    visible: false\r\n\t                },\r\n\t                new go.Binding(\"visible\", \"isInterlocked\")\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Four Way Valve\r\n\t    nodeMap.add(\"FourWayValveModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t                name: \"FourWayValveModel\",\r\n\t                locationSpot: go.Spot.Center,\r\n\t                width: 48,\r\n\t                height: 48,\r\n\t                minSize: new go.Size(8, 8),\r\n\t                scale: 1,\r\n\t                toolTip: tooltipTemplate,\r\n\t                selectionAdorned: true,\r\n\t                selectionObjectName: \"FourWayValveModel\",\r\n\t                selectionAdornmentTemplate: selectionAdornment\r\n\t            },\r\n\t            new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t            new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t            new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t            new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t            new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t            $$(go.Panel, \"Position\",\r\n\t                $$(go.Shape, \"triangle\", {\r\n\t                        position: new go.Point(12, 0),\r\n\t                        width: 24,\r\n\t                        height: 24,\r\n\t                        angle: 180,\r\n\t                        fill: brush.grey,\r\n\t                        stroke: \"black\"\r\n\t                    }, \r\n\t                    new go.Binding(\"fill\", \"flow\", function(value, obj){\r\n\t                        return getBladeColor(1, value, obj);\r\n\t                    }),\r\n\t                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                        if (v) return brush.alarm;\r\n\t                        return \"black\";\r\n\t                    }) \r\n\t                ),\r\n\t                $$(go.Shape, \"triangle\", {\r\n\t                        position: new go.Point(24, 12),\r\n\t                        width: 24,\r\n\t                        height: 24,\r\n\t                        angle: 270,\r\n\t                        fill: brush.grey,\r\n\t                        stroke: \"black\"\r\n\t                    },\r\n\t                    new go.Binding(\"fill\", \"flow\", function(value, obj){ \r\n\t                        return getBladeColor(2, value, obj);\r\n\t                    }),\r\n\t                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                        if (v) return brush.alarm;\r\n\t                        return \"black\";\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"triangle\", {\r\n\t                        position: new go.Point(12, 24.75),\r\n\t                        width: 24,\r\n\t                        height: 23.25,\r\n\t                        fill: brush.grey,\r\n\t                        stroke: \"black\"\r\n\t                    },\r\n\t                    new go.Binding(\"fill\", \"flow\", function(value, obj){\r\n\t                        return getBladeColor(3, value, obj);\r\n\t                    }),\r\n\t                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                        if (v) return brush.alarm;\r\n\t                        return \"black\";\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"triangle\", {\r\n\t                        position: new go.Point(0, 12),\r\n\t                        width: 24,\r\n\t                        height: 24,\r\n\t                        angle: 90,\r\n\t                        fill: brush.grey,\r\n\t                        stroke: \"black\"\r\n\t                    },\r\n\t                    new go.Binding(\"fill\", \"flow\", function(value, obj){  \r\n\t                        return getBladeColor(4, value, obj);\r\n\t                    }),\r\n\t                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                        if (v) return brush.alarm;\r\n\t                        return \"black\";\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.TextBlock,{\r\n\t                    position: new go.Point(19.5, -12.75),\r\n\t                    text: \"1\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    font: \"normal normal bold 12px verdana\"\r\n\t                }),\r\n\t                $$(go.TextBlock,{\r\n\t                    position: new go.Point(49, 17.5),\r\n\t                    text: \"2\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    font: \"normal normal bold 12px verdana\"\r\n\t                }),\r\n\t                $$(go.TextBlock,{\r\n\t                    position: new go.Point(19.5, 48),\r\n\t                    text: \"3\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    font: \"normal normal bold 12px verdana\"\r\n\t                }),\r\n\t                $$(go.TextBlock,{\r\n\t                    position: new go.Point(-10, 17.5),\r\n\t                    text: \"4\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    font: \"normal normal bold 12px verdana\"\r\n\t                }),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(21.75, 2.25),\r\n\t                        width: 12,\r\n\t                        height: 4.5,\r\n\t                        angle: 90,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(1, valveBladeState.Input, value, obj);\r\n\t                    }) \r\n\t                ),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(21.75, 2.25),\r\n\t                        width: 12,\r\n\t                        height: 4.5,\r\n\t                        angle: -90,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(1, valveBladeState.Output, value, obj);\r\n\t                    }) \r\n\t                ),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(33, 21.75),\r\n\t                        width: 12,\r\n\t                        height: 4.5,\r\n\t                        angle: 180,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                       return getBladeVisibility(2, valveBladeState.Input, value, obj);\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(33, 21.75),\r\n\t                        width: 12,\r\n\t                        height: 4.5,\r\n\t                        angle: 0,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(2, valveBladeState.Output, value, obj);\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(21.75, 33),\r\n\t                        width: 12,\r\n\t                        height: 4.5,\r\n\t                        angle: -90,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(3, valveBladeState.Input, value, obj);\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(21.75, 33),\r\n\t                        width: 12,\r\n\t                        height: 4.5,\r\n\t                        angle: 90,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(3, valveBladeState.Output, value, obj);\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(2.25, 21.75),\r\n\t                        width: 12,\r\n\t                        height: 4.5,\r\n\t                        angle: 0,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(4, valveBladeState.Input, value, obj);\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(2.25, 21.75),\r\n\t                        width: 12,\r\n\t                        height: 4.5,\r\n\t                        angle: 180,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(4, valveBladeState.Output, value, obj);\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"rectangle\", {\r\n\t                        position: new go.Point(1, 1),\r\n\t                        fill: brush.interlock,\r\n\t                        stroke: brush.interlock,\r\n\t                        width: 2,\r\n\t                        height: 60,\r\n\t                        angle: 135,\r\n\t                        visible: false,\r\n\t                        strokeWidth: 2\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"isInterlocked\")\r\n\t                )\r\n\t            )\r\n\t        ));\r\n\t\r\n\t        // Three Way Valve\r\n\t        nodeMap.add(\"ThreeWayValveModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t                name: \"ThreeWayValveModel\",\r\n\t                locationSpot: go.Spot.Center,\r\n\t                width: 44.8,\r\n\t                height: 44.8,\r\n\t                minSize: new go.Size(8, 8),\r\n\t                scale: 1,\r\n\t                toolTip: tooltipTemplate,\r\n\t                selectionAdorned: true,\r\n\t                selectionObjectName: \"ThreeWayValveModel\",\r\n\t                selectionAdornmentTemplate: selectionAdornment\r\n\t            },\r\n\t            new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t            new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t            new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t            new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t            new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t            $$(go.Panel, \"Position\",\r\n\t                $$(go.Shape, \"rectangle\", {\r\n\t                        position: new go.Point(5.6, 0),\r\n\t                        height: 1.4,\r\n\t                        width: 33.6\r\n\t                    },\r\n\t                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                        if (v) return brush.alarm;\r\n\t                        return \"black\";\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"rectangle\", {\r\n\t                        position: new go.Point(19.6, 1.4),\r\n\t                        fill: brush.grey,\r\n\t                        height: 21,\r\n\t                        width: 5.6,\r\n\t                        stroke: \"black\"\r\n\t                    },\r\n\t                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                        if (v) return brush.alarm;\r\n\t                        return \"black\";\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"triangle\", {\r\n\t                        position: new go.Point(22.4, 11.2),\r\n\t                        width: 22.4,\r\n\t                        height: 22.4,\r\n\t                        angle: 270,\r\n\t                        fill: brush.grey,\r\n\t                        stroke: \"black\"\r\n\t                    },\r\n\t                    new go.Binding(\"fill\", \"flow\", function(value, obj){\r\n\t                        return getBladeColor(1, value, obj);\r\n\t                    }),\r\n\t                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                        if (v) return brush.alarm;\r\n\t                        return \"black\";\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"triangle\", {\r\n\t                        position: new go.Point(11.2, 23.1),\r\n\t                        width: 22.4,\r\n\t                        height: 21.7,\r\n\t                        fill: brush.grey,\r\n\t                        stroke: \"black\"\r\n\t                    },\r\n\t                    new go.Binding(\"fill\", \"flow\", function(value, obj){\r\n\t                        return getBladeColor(2, value, obj);\r\n\t                    }),\r\n\t                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                        if (v) return brush.alarm;\r\n\t                        return \"black\";\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"triangle\", {\r\n\t                        position: new go.Point(0, 11.2),\r\n\t                        width: 22.4,\r\n\t                        height: 22.4,\r\n\t                        angle: 90,\r\n\t                        fill: brush.grey,\r\n\t                        stroke: \"black\"\r\n\t                    },\r\n\t                    new go.Binding(\"fill\", \"flow\", function(value, obj){\r\n\t                        return getBladeColor(3, value, obj);\r\n\t                    }),\r\n\t                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                        if (v) return brush.alarm;\r\n\t                        return \"black\";\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.TextBlock,{\r\n\t                    position: new go.Point(45.5, 17),\r\n\t                    text: \"1\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    font: \"normal normal bold 10px verdana\"\r\n\t                }),\r\n\t                $$(go.TextBlock,{\r\n\t                    position: new go.Point(18.5, 45.5),\r\n\t                    text: \"2\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    font: \"normal normal bold 10px verdana\"\r\n\t                }),\r\n\t                $$(go.TextBlock,{\r\n\t                    position: new go.Point(-9, 17),\r\n\t                    text: \"3\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    font: \"normal normal bold 10px verdana\"\r\n\t                }),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(30.8, 20.3),\r\n\t                        width: 11.2,\r\n\t                        height: 4.2,\r\n\t                        angle: 180,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(1, valveBladeState.Input, value, obj);\r\n\t                    }) \r\n\t                ),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(30.8, 20.3),\r\n\t                        width: 11.2,\r\n\t                        height: 4.2,\r\n\t                        angle: 0,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(1, valveBladeState.Output, value, obj);\r\n\t                    }) \r\n\t                ),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(20.3, 30.8),\r\n\t                        width: 11.2,\r\n\t                        height: 4.2,\r\n\t                        angle: -90,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(2, valveBladeState.Input, value, obj);\r\n\t                    }) \r\n\t                ),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(20.3, 30.8),\r\n\t                        width: 11.2,\r\n\t                        height: 4.2,\r\n\t                        angle: 90,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(2, valveBladeState.Output, value, obj);\r\n\t                    }) \r\n\t                ),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(2.8, 20.3),\r\n\t                        width: 11.2,\r\n\t                        height: 4.2,\r\n\t                        angle: 0,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(3, valveBladeState.Input, value, obj);\r\n\t                    }) \r\n\t                ),\r\n\t                $$(go.Shape, \"arrow\", {\r\n\t                        position: new go.Point(2.8, 20.3),\r\n\t                        width: 11.2,\r\n\t                        height: 4.2,\r\n\t                        angle: 180,\r\n\t                        fill: 'black',\r\n\t                        stroke: \"black\",\r\n\t                        visible: false\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n\t                        return getBladeVisibility(3, valveBladeState.Output, value, obj);\r\n\t                    }) \r\n\t                ),\r\n\t                $$(go.Shape, \"rectangle\", {\r\n\t                        fill: brush.interlock,\r\n\t                        stroke: brush.interlock,\r\n\t                        width: 1,\r\n\t                        height: 41,\r\n\t                        angle: 135,\r\n\t                        visible: false,\r\n\t                        strokeWidth: 1\r\n\t                    },\r\n\t                    new go.Binding(\"visible\", \"isInterlocked\")\r\n\t                )\r\n\t            )\r\n\t        ));\r\n\t\r\n\t        // Two Way Valve\r\n\t        nodeMap.add(\"TwoWayValveModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t                name: \"TwoWayValveModel\",\r\n\t                locationSpot: go.Spot.Center,\r\n\t                width: 32,\r\n\t                height: 32,\r\n\t                minSize: new go.Size(8, 8),\r\n\t                scale: 1,\r\n\t                toolTip: tooltipTemplate,\r\n\t                selectionAdorned: true,\r\n\t                selectionObjectName: \"TwoWayValveModel\",\r\n\t                selectionAdornmentTemplate: selectionAdornment\r\n\t            },\r\n\t            new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t            new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t            new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t            new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t            new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t            $$(go.Panel, \"Position\",\r\n\t                $$(go.Shape, \"rectangle\", {\r\n\t                    position: new go.Point(4, 0),\r\n\t                    height: 1,\r\n\t                    width: 24\r\n\t                },\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"rectangle\", {\r\n\t                    position: new go.Point(14, 1),\r\n\t                    fill: brush.grey,\r\n\t                    height: 23,\r\n\t                    width: 4,\r\n\t                    stroke: \"black\"\r\n\t                },\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"triangle\", {\r\n\t                    position: new go.Point(0, 16),\r\n\t                    width: 16,\r\n\t                    height: 16,\r\n\t                    angle: 90,\r\n\t                    fill: brush.grey,\r\n\t                    stroke: \"black\"\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"state\", function (v) {\r\n\t                    if (v === 'Open') return brush.on;\r\n\t                    return brush.grey;\r\n\t                }),\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"triangle\", {\r\n\t                    position: new go.Point(16, 16),\r\n\t                    width: 16,\r\n\t                    height: 16,\r\n\t                    angle: 270,\r\n\t                    fill: brush.grey,\r\n\t                    stroke: \"black\"\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"state\", function (v) {\r\n\t                    if (v === 'Open') return brush.on;\r\n\t                    return brush.grey;\r\n\t                }),\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"rectangle\", {\r\n\t                    fill: brush.interlock,\r\n\t                    stroke: brush.interlock,\r\n\t                    width: 2,\r\n\t                    height: 42.5,\r\n\t                    angle: 135,\r\n\t                    visible: false\r\n\t                },\r\n\t                new go.Binding(\"visible\", \"isInterlocked\")\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Variable Speed Motor\r\n\t    nodeMap.add(\"VariableSpeedMotorModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"VariableSpeedMotorModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 32,\r\n\t            height: 32,\r\n\t            minSize: new go.Size(8, 8),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'VariableSpeedMotorModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, {\r\n\t                geometryString: \"M0 33 L33 -1\",\r\n\t                fill: \"black\"\r\n\t            }),\r\n\t            $$(go.Shape, {\r\n\t                geometryString: \"F M27 0 L32 5 L33 -1 L27 0z\",\r\n\t                fill: \"black\"\r\n\t            }),\r\n\t            $$(go.Shape, {\r\n\t                geometryString: \"F M32 5 L27 0 L33 -1 L32 5z\",\r\n\t                fill: \"black\"\r\n\t            }),\r\n\t            $$(go.Shape, \"circle\", {\r\n\t                    fill: brush.grey,\r\n\t                    visible: true,\r\n\t                    stroke: \"black\",\r\n\t                    width: 32\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isRunning\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                }),\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(0.5, 5.5),\r\n\t                    text: \"M\",\r\n\t                    font: \"normal normal bold 18px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    width: 32\r\n\t                },\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"rectangle\", {\r\n\t                    fill: brush.interlock,\r\n\t                    stroke: brush.interlock,\r\n\t                    width: 2,\r\n\t                    height: 42,\r\n\t                    angle: 135,\r\n\t                    visible: false\r\n\t                },\r\n\t                new go.Binding(\"visible\", \"isInterlocked\")\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Weigh Cell\r\n\t    nodeMap.add(\"WeighCellModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"WeighCellModel\",\r\n\t            width: 132,\r\n\t            height: 16,\r\n\t            minSize: new go.Size(33, 4),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'WeighCellModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                    position: new go.Point(0, 0),\r\n\t                    fill: brush.grey,\r\n\t                    width: 24,\r\n\t                    height: 16\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(0, 1.6),\r\n\t                text: \"WT\",\r\n\t                font: \"normal normal bold 12.8px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"center\",\r\n\t                editable: false,\r\n\t                width: 24\r\n\t            }),\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                position: new go.Point(24, 0),\r\n\t                fill: brush.display,\r\n\t                width: 108,\r\n\t                height: 16\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(24, 1.6),\r\n\t                    text: \"-135,889.9\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    isMultiline: false,\r\n\t                    textAlign: \"end\",\r\n\t                    width: 60\r\n\t                },\r\n\t                new go.Binding(\"text\", \"value\", convertFloat)\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(85, 1.6),\r\n\t                    text: \"other\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    width: 48\r\n\t                },\r\n\t                new go.Binding(\"text\", \"engineeringUnits\", function (v) {\r\n\t                    return v.replace(\"_\", \"/\");\r\n\t                })\r\n\t            ))\r\n\t    ));\r\n\t\r\n\t    // EM1 Model\r\n\t    nodeMap.add(\"EM1Model\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"EM1Model\",\r\n\t            width: 48,\r\n\t            height: 36,\r\n\t            minSize: new go.Size(12, 9),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'EM1Model',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                    stroke: \"black\",\r\n\t                    fill: brush.grey,\r\n\t                    width: 48,\r\n\t                    height: 36\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"Hexagon\", {\r\n\t                    position: new go.Point(1, 0),\r\n\t                    angle: 90,\r\n\t                    stroke: \"black\",\r\n\t                    fill: brush.grey,\r\n\t                    width: 36,\r\n\t                    height: 45\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"LineH\", {\r\n\t                position: new go.Point(1, 17.25),\r\n\t                stroke: \"black\",\r\n\t                height: 1.5,\r\n\t                width: 45\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(4.5, 7),\r\n\t                text: \"EM1\",\r\n\t                width: 39,\r\n\t                isMultiline: true,\r\n\t                editable: false,\r\n\t                textAlign: \"center\",\r\n\t                font: \"normal normal bold 8px sansserif\",\r\n\t                name: \"TopText\"\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(4.4, 18.3),\r\n\t                    text: \"\",\r\n\t                    width: 39,\r\n\t                    isMultiline: false,\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    font: \"normal normal bold 6px sansserif\",\r\n\t                    name: \"BottomText\"\r\n\t                },\r\n\t                new go.Binding(\"text\", \"name\", function (v) {\r\n\t                    if (v && v.length > 9)\r\n\t                        v = v.substring(0, 9);\r\n\t                    return v;\r\n\t                })\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Unit\r\n\t    nodeMap.add(\"S88UnitModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"S88UnitModel\",\r\n\t            width: 48,\r\n\t            height: 36,\r\n\t            minSize: new go.Size(12, 9),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'S88UnitModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                    stroke: \"black\",\r\n\t                    fill: brush.magenta,\r\n\t                    width: 48,\r\n\t                    height: 36,\r\n\t                    name: \"Rectangle\"\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"oEEStatus\", function (v) {\r\n\t                    return getOEEStatusColour(v, \"S88Unit\");\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"Hexagon\", {\r\n\t                    position: new go.Point(1, 0),\r\n\t                    angle: 90,\r\n\t                    stroke: \"black\",\r\n\t                    fill: brush.magenta,\r\n\t                    width: 36,\r\n\t                    height: 45,\r\n\t                    name: \"Hexagon\"\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"oEEStatus\", function (v) {\r\n\t                    return getOEEStatusColour(v, \"S88Unit\");\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"LineH\", {\r\n\t                position: new go.Point(1, 17.25),\r\n\t                stroke: \"black\",\r\n\t                height: 1.5,\r\n\t                width: 45,\r\n\t                name: \"LineH\"\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(4.5, 9),\r\n\t                text: \"S88UNIT\",\r\n\t                width: 39,\r\n\t                isMultiline: true,\r\n\t                editable: false,\r\n\t                textAlign: \"center\",\r\n\t                font: \"normal normal bold 8px sansserif\",\r\n\t                name: \"TopText\"\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(4.4, 18.3),\r\n\t                    text: \"\",\r\n\t                    width: 39,\r\n\t                    isMultiline: false,\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    font: \"normal normal bold 6px sansserif\",\r\n\t                    name: \"BottomText\"\r\n\t                },\r\n\t                new go.Binding(\"text\", \"name\", function (v) {\r\n\t                    if (v.length > 9)\r\n\t                        v = v.substring(0, 9);\r\n\t                    return v;\r\n\t                })\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    /* S95 Model */\r\n\t    // MES Station\r\n\t    nodeMap.add(\"MESStationModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"MESStationModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 32,\r\n\t            height: 32,\r\n\t            minSize: new go.Size(8, 8),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'MESStationModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                fill: brush.grey,\r\n\t                stroke: \"black\",\r\n\t                width: 32,\r\n\t                height: 32\r\n\t            }),\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                position: new go.Point(4, 2),\r\n\t                fill: brush.display,\r\n\t                stroke: \"black\",\r\n\t                width: 24,\r\n\t                height: 18\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(6, 4),\r\n\t                text: \"MES Station X\\n   >> ....\",\r\n\t                stroke: \"black\",\r\n\t                editable: false,\r\n\t                textAlign: \"left\",\r\n\t                font: \"normal normal bold 2.5px sansserif\",\r\n\t                width: 22\r\n\t            }),\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                position: new go.Point(2, 24),\r\n\t                fill: 'black',\r\n\t                stroke: \"black\",\r\n\t                width: 28,\r\n\t                height: 5\r\n\t            })\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Scanner\r\n\t    nodeMap.add(\"ScannerModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"ScannerModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 76,\r\n\t            height: 29,\r\n\t            minSize: new go.Size(19, 7.25),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'ScannerModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                    position: new go.Point(0, 0),\r\n\t                    fill: brush.grey,\r\n\t                    stroke: \"black\",\r\n\t                    width: 76,\r\n\t                    height: 29\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isScanning\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                }),\r\n\t                new go.Binding(\"fill\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                position: new go.Point(3, 2),\r\n\t                fill: brush.display,\r\n\t                stroke: \"black\",\r\n\t                width: 70,\r\n\t                height: 25\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                text: \"Lot:\",\r\n\t                font: \"normal normal bold 6px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"left\",\r\n\t                editable: false,\r\n\t                position: new go.Point(6, 4)\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    text: \"\",\r\n\t                    font: \"normal normal bold 6px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    textAlign: \"left\",\r\n\t                    editable: false,\r\n\t                    position: new go.Point(25, 4)\r\n\t                },\r\n\t                new go.Binding(\"text\", \"value\", function (v) {\r\n\t                    if (v === null || v.length < 2) return '';\r\n\t                    if (v[1] === null) return '';\r\n\t                    if (v[1].length > 12)\r\n\t                        return v[1].substring(0, 12);\r\n\t                    return v[1];\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                text: \"EXP:\",\r\n\t                font: \"normal normal bold 6px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"left\",\r\n\t                editable: false,\r\n\t                position: new go.Point(6, 11)\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    text: \"\",\r\n\t                    font: \"normal normal bold 6px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    textAlign: \"left\",\r\n\t                    editable: false,\r\n\t                    position: new go.Point(25, 11)\r\n\t                },\r\n\t                new go.Binding(\"text\", \"value\", function (v) {\r\n\t                    if (v === null || v.length < 3) return '';\r\n\t                    if (v[2] === null) return '';\r\n\t                    var dateString = v[2].split('/');\r\n\t                    var year = parseInt(dateString[2]);\r\n\t                    var month = parseInt(dateString[1]) - 1;\r\n\t                    var day = parseInt(dateString[0]);\r\n\t                    var date = new Date(year, month, day);\r\n\t                    var formattedDate = moment(date).format('DD/MM/YYYY');\r\n\t                    if (formattedDate === 'Invalid date')\r\n\t                        return '';\r\n\t                    return formattedDate;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                text: \"SN:\",\r\n\t                font: \"normal normal bold 6px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"left\",\r\n\t                editable: false,\r\n\t                position: new go.Point(6, 18)\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    text: \"\",\r\n\t                    font: \"normal normal bold 6px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    textAlign: \"left\",\r\n\t                    editable: false,\r\n\t                    position: new go.Point(25, 18)\r\n\t                },\r\n\t                new go.Binding(\"text\", \"value\", function (v) {\r\n\t                    if (v === null || v.length < 1) return '';\r\n\t                    if (v[0] === null) return '';\r\n\t                    if (v[0].length > 12)\r\n\t                        return v[0].substring(0, 12);\r\n\t                    return v[0];\r\n\t                })\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Camera\r\n\t    nodeMap.add(\"CameraModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"CameraModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 70,\r\n\t            height: 50,\r\n\t            minSize: new go.Size(17.5, 12.5),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'CameraModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Vertical\",\r\n\t            $$(go.Panel, { name: 'PANEL', angle: 30 },\r\n\t                $$(go.Shape, \"Rectangle\", {\r\n\t                        position: new go.Point(0, 0),\r\n\t                        fill: brush.grey,\r\n\t                        stroke: \"black\",\r\n\t                        width: 7,\r\n\t                        height: 28\r\n\t                    },\r\n\t                    new go.Binding(\"fill\", \"state\", function (v) {\r\n\t                        if (v === \"Running\") return brush.on;\r\n\t                        return brush.off;\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"Rectangle\", {\r\n\t                        position: new go.Point(7, 0),\r\n\t                        fill: brush.grey,\r\n\t                        stroke: \"black\",\r\n\t                        width: 46,\r\n\t                        height: 28\r\n\t                    },\r\n\t                    new go.Binding(\"fill\", \"alarm\", function (v) {\r\n\t                        if (v) return brush.alarm;\r\n\t                        return brush.grey;\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"Rectangle\", {\r\n\t                        position: new go.Point(53, 0),\r\n\t                        fill: brush.grey,\r\n\t                        stroke: \"black\",\r\n\t                        width: 7,\r\n\t                        height: 28\r\n\t                    },\r\n\t                    new go.Binding(\"fill\", \"state\", function (v) {\r\n\t                        if (v === \"Running\") return brush.on;\r\n\t                        return brush.off;\r\n\t                    })\r\n\t                ),\r\n\t                $$(go.Shape, \"Rectangle\", {\r\n\t                    position: new go.Point(60, 5),\r\n\t                    fill: \"black\",\r\n\t                    stroke: \"black\",\r\n\t                    width: 10,\r\n\t                    height: 18\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(0, 0),\r\n\t                    text: \"\",\r\n\t                    font: \"normal normal bold 12px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    width: 90\r\n\t                },\r\n\t                new go.Binding(\"text\", \"value\", function (value, part) {\r\n\t                    return value;\r\n\t                })\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Printer Model\r\n\t    nodeMap.add(\"PrinterModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"PrinterModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 32,\r\n\t            height: 30,\r\n\t            minSize: new go.Size(8, 7.5),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'PrinterModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, {\r\n\t                    figure: \"Rectangle\",\r\n\t                    stroke: \"black\",\r\n\t                    width: 32,\r\n\t                    height: 30,\r\n\t                    fill: brush.grey\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isPrinting\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                }),\r\n\t                new go.Binding(\"fill\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, {\r\n\t                position: new go.Point(2, 4),\r\n\t                figure: \"Rectangle\",\r\n\t                stroke: \"black\",\r\n\t                width: 11,\r\n\t                height: 12,\r\n\t            }),\r\n\t            $$(go.Shape, {\r\n\t                position: new go.Point(3, 5),\r\n\t                figure: \"Rectangle\",\r\n\t                fill: brush.display,\r\n\t                stroke: brush.display,\r\n\t                width: 9,\r\n\t                height: 4,\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(4, 6),\r\n\t                text: \"Ready....\",\r\n\t                font: \"normal normal bold 2px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"center\",\r\n\t                editable: false,\r\n\t                width: 7\r\n\t            }),\r\n\t            $$(go.Shape, \"Circle\", {\r\n\t                position: new go.Point(7, 11.5),\r\n\t                fill: \"yellow\",\r\n\t                stroke: \"yellow\",\r\n\t                width: 1,\r\n\t                height: 1\r\n\t            }),\r\n\t            $$(go.Shape, {\r\n\t                position: new go.Point(15, 4),\r\n\t                figure: \"Rectangle\",\r\n\t                stroke: \"black\",\r\n\t                width: 15,\r\n\t                height: 24,\r\n\t            }),\r\n\t            $$(go.Shape, {\r\n\t                position: new go.Point(15, 19),\r\n\t                figure: \"Rectangle\",\r\n\t                fill: 'white',\r\n\t                stroke: \"black\",\r\n\t                width: 15,\r\n\t                height: 6,\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(17, 21.5),\r\n\t                text: \"N3 0069-4220-30 3  LOT A123456\",\r\n\t                font: \"normal normal bold 1px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"center\",\r\n\t                editable: false,\r\n\t                width: 13\r\n\t            })\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Generic Equipment\r\n\t    nodeMap.add(\"GenericEquipmentModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"GenericEquipmentModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 32,\r\n\t            height: 32,\r\n\t            minSize: new go.Size(8, 8),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'GenericEquipmentModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, {\r\n\t                figure: \"StopSign\",\r\n\t                fill: brush.grey,\r\n\t                stroke: \"black\",\r\n\t                width: 32,\r\n\t                height: 32\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(9, 2),\r\n\t                text: \"GE\",\r\n\t                stroke: \"black\",\r\n\t                editable: false,\r\n\t                textAlign: \"center\",\r\n\t                font: \"normal normal bold 9px sansserif\"\r\n\t            }),\r\n\t            $$(go.Panel, \"Position\",\r\n\t                $$(go.Shape, \"Rectangle\", {\r\n\t                    position: new go.Point(2, 11.5),\r\n\t                    fill: brush.display,\r\n\t                    width: 28,\r\n\t                    height: 6\r\n\t                }),\r\n\t                $$(go.TextBlock, {\r\n\t                        position: new go.Point(3.5, 12.5),\r\n\t                        text: \"\",\r\n\t                        font: \"normal normal bold 4px sansserif\",\r\n\t                        stroke: \"black\",\r\n\t                        editable: false,\r\n\t                        textAlign: \"center\",\r\n\t                        width: 26,\r\n\t                        height: 6\r\n\t                    },\r\n\t                    new go.Binding(\"text\", \"value\")\r\n\t                )\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(1, 18.5),\r\n\t                    text: \"\",\r\n\t                    font: \"normal normal bold 4px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    width: 30,\r\n\t                    height: 6\r\n\t                },\r\n\t                new go.Binding(\"text\", \"name\", function (v) {\r\n\t                    if (v.length > 9)\r\n\t                        v = v.substring(0, 9);\r\n\t                    return v;\r\n\t                })\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Weigh Scale\r\n\t    nodeMap.add(\"WeighScaleModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"WeighScaleModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 108,\r\n\t            height: 55.1,\r\n\t            minSize: new go.Size(27, 13.775),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'WeighScaleModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"triangle\", {\r\n\t                position: new go.Point(28, 0),\r\n\t                fill: brush.grey,\r\n\t                width: 14,\r\n\t                height: 14\r\n\t            }, new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                if (v) return brush.alarm;\r\n\t                return \"black\";\r\n\t            })\r\n\t            ),\r\n\t            $$(go.Shape, {\r\n\t                    geometryString: \"F M35 0 L75 6.5\",\r\n\t                    fill: \"black\"\r\n\t                },\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"triangle\", {\r\n\t                    position: new go.Point(68, 6.5),\r\n\t                    fill: brush.grey,\r\n\t                    width: 14,\r\n\t                    height: 14\r\n\t                },\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"triangle\", {\r\n\t                    position: new go.Point(34, 4.5),\r\n\t                    fill: brush.grey,\r\n\t                    width: 40,\r\n\t                    height: 40\r\n\t                },\r\n\t                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n\t                    if (v) return brush.alarm;\r\n\t                    return \"black\";\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                position: new go.Point(0, 39.1),\r\n\t                fill: brush.display,\r\n\t                width: 108,\r\n\t                height: 16\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(0, 40.7),\r\n\t                    text: \"\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    isMultiline: false,\r\n\t                    textAlign: \"end\",\r\n\t                    width: 60\r\n\t                },\r\n\t                new go.Binding(\"text\", \"value\", convertFloat)\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(61.6, 40.7),\r\n\t                    text: \"other\",\r\n\t                    font: \"normal normal bold 12.8px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    width: 48\r\n\t                },\r\n\t                new go.Binding(\"text\", \"engineeringUnits\", function (v) {\r\n\t                    return v.replace(\"_\", \"/\");\r\n\t                })\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Work Unit\r\n\t    nodeMap.add(\"S95WorkUnitModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"S95WorkUnitModel\",\r\n\t            width: 48,\r\n\t            height: 36,\r\n\t            minSize: new go.Size(12, 9),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'S95WorkUnitModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                    stroke: \"black\",\r\n\t                    fill: brush.purple,\r\n\t                    width: 48,\r\n\t                    height: 36\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"oEEStatus\", function (v) {\r\n\t                    return getOEEStatusColour(v, \"S95WorkUnit\");\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"Hexagon\", {\r\n\t                    position: new go.Point(1, 0),\r\n\t                    angle: 90,\r\n\t                    stroke: \"black\",\r\n\t                    fill: brush.purple,\r\n\t                    width: 36,\r\n\t                    height: 45\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"oEEStatus\", function (v) {\r\n\t                    return getOEEStatusColour(v, \"S95WorkUnit\");\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"LineH\", {\r\n\t                position: new go.Point(1, 17.25),\r\n\t                stroke: \"black\",\r\n\t                width: 45,\r\n\t                height: 1.5\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(4.5, 9),\r\n\t                text: \"S95UNIT\",\r\n\t                width: 39,\r\n\t                isMultiline: true,\r\n\t                editable: false,\r\n\t                textAlign: \"center\",\r\n\t                font: \"normal normal bold 8px sansserif\",\r\n\t                name: \"TopText\"\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(4.4, 18.3),\r\n\t                    text: \"\",\r\n\t                    width: 39,\r\n\t                    isMultiline: false,\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    font: \"normal normal bold 6px sansserif\"\r\n\t                },\r\n\t                new go.Binding(\"text\", \"name\", function (v) {\r\n\t                    if (v.length > 9)\r\n\t                        v = v.substring(0, 9);\r\n\t                    return v;\r\n\t                })\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // EMUnit Model\r\n\t    nodeMap.add(\"EMUnitModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"EMUnitModel\",\r\n\t            width: 48,\r\n\t            height: 36,\r\n\t            minSize: new go.Size(12, 9),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'EMUnitModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, \"Rectangle\", {\r\n\t                    stroke: \"black\",\r\n\t                    fill: brush.grey,\r\n\t                    width: 48,\r\n\t                    height: 36\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"Hexagon\", {\r\n\t                    position: new go.Point(1, 0),\r\n\t                    angle: 90,\r\n\t                    stroke: \"black\",\r\n\t                    fill: brush.grey,\r\n\t                    width: 36,\r\n\t                    height: 45\r\n\t                },\r\n\t                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.grey;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, \"LineH\", {\r\n\t                position: new go.Point(1, 17.25),\r\n\t                stroke: \"black\",\r\n\t                height: 1.5,\r\n\t                width: 45\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                position: new go.Point(4.5, 7),\r\n\t                text: \"EMUnit\",\r\n\t                width: 39,\r\n\t                isMultiline: true,\r\n\t                editable: false,\r\n\t                textAlign: \"center\",\r\n\t                font: \"normal normal bold 8px sansserif\",\r\n\t                name: \"TopText\"\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(4.4, 18.3),\r\n\t                    text: \"\",\r\n\t                    width: 39,\r\n\t                    isMultiline: false,\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    font: \"normal normal bold 6px sansserif\",\r\n\t                    name: \"BottomText\"\r\n\t                },\r\n\t                new go.Binding(\"text\", \"name\", function (v) {\r\n\t                    if (v && v.length > 9)\r\n\t                        v = v.substring(0, 9);\r\n\t                    return v;\r\n\t                })\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // S95 Transaction Module\r\n\t    nodeMap.add(\"S95TransactionModuleModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"S95TransactionModuleModel\",\r\n\t            width: 60,\r\n\t            height: 60,\r\n\t            minSize: new go.Size(15, 15),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'S95TransactionModuleModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, {\r\n\t                    figure: \"DoubleEndArrow\",\r\n\t                    fill: brush.purple,\r\n\t                    stroke: \"black\",\r\n\t                    width: 60,\r\n\t                    height: 60\r\n\t                },\r\n\t                new go.Binding('fill', 'isOn', function (v) {\r\n\t                    if (v) return brush.on;\r\n\t                    return brush.purple;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                    position: new go.Point(4.5, 25),\r\n\t                    text: \"\",\r\n\t                    width: 54,\r\n\t                    stroke: \"black\",\r\n\t                    editable: false,\r\n\t                    textAlign: \"center\",\r\n\t                    alignment: go.Spot.Center,\r\n\t                    font: \"normal normal bold 9px sansserif\"\r\n\t                },\r\n\t                new go.Binding(\"text\", \"name\", function (v) {\r\n\t                    if (v.length > 8)\r\n\t                        v = v.substring(0, 8);\r\n\t                    return v;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.Shape, {\r\n\t                    figure: \"IBeamArrow\",\r\n\t                    position: new go.Point(24, 45),\r\n\t                    fill: brush.grey,\r\n\t                    stroke: \"black\",\r\n\t                    width: 15,\r\n\t                    height: 15,\r\n\t                    visible: false\r\n\t                },\r\n\t                new go.Binding(\"visible\", \"isMocked\")\r\n\t            )\r\n\t        )\r\n\t    ));\r\n\t\r\n\t    // Carton \r\n\t    nodeMap.add(\"CartonModel\", $$(go.Part, go.Panel.Viewbox, {\r\n\t            name: \"CartonModel\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 100,\r\n\t            height: 35,\r\n\t            minSize: new go.Size(25, 8.75),\r\n\t            scale: 1,\r\n\t            toolTip: tooltipTemplate,\r\n\t            selectionAdorned: true,\r\n\t            selectionObjectName: 'CartonModel',\r\n\t            selectionAdornmentTemplate: selectionAdornment\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n\t        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n\t        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n\t        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n\t        $$(go.Panel, \"Position\",\r\n\t            $$(go.Shape, {\r\n\t                figure: \"Rectangle\",\r\n\t                stroke: \"black\",\r\n\t                width: 100,\r\n\t                height: 35,\r\n\t                fill: brush.grey\r\n\t            }),\r\n\t            $$(go.Picture, {\r\n\t                position: new go.Point(3, 5),\r\n\t                source: \"/images/qr-code.png\",\r\n\t                width: 25,\r\n\t                height: 25\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                text: \"\",\r\n\t                font: \"normal normal bold 6px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"right\",\r\n\t                editable: false,\r\n\t                width: 65,\r\n\t                position: new go.Point(31, 2)\r\n\t            },\r\n\t            new go.Binding('text', 'name', function (v) {\r\n\t                if (v === null) return '';\r\n\t                if (v.length > 15)\r\n\t                    return v.substring(0, 15);\r\n\t                return v;\r\n\t            })),\r\n\t            $$(go.TextBlock, {\r\n\t                text: \"Lot:\",\r\n\t                font: \"normal normal bold 6px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"left\",\r\n\t                editable: false,\r\n\t                position: new go.Point(33, 12)\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    text: \"\",\r\n\t                    font: \"normal normal bold 6px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    textAlign: \"left\",\r\n\t                    editable: false,\r\n\t                    position: new go.Point(52, 12)\r\n\t                },\r\n\t                new go.Binding(\"text\", \"lotNumber\", function (v) {\r\n\t                    if (v === null) return '';\r\n\t                    if (v.length > 12)\r\n\t                        return v.substring(0, 12);\r\n\t                    return v;\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                text: \"EXP:\",\r\n\t                font: \"normal normal bold 6px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"left\",\r\n\t                editable: false,\r\n\t                position: new go.Point(33, 19)\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    text: \"\",\r\n\t                    font: \"normal normal bold 6px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    textAlign: \"left\",\r\n\t                    editable: false,\r\n\t                    position: new go.Point(52, 19),\r\n\t                },\r\n\t                new go.Binding(\"text\", \"expiryDate\", function (v) {\r\n\t                    if (angular.isDate(v))\r\n\t                        return moment(v).format('DD/MM/YYYY');\r\n\t                    return '';\r\n\t                })\r\n\t            ),\r\n\t            $$(go.TextBlock, {\r\n\t                text: \"SN:\",\r\n\t                font: \"normal normal bold 6px sansserif\",\r\n\t                stroke: \"black\",\r\n\t                textAlign: \"left\",\r\n\t                editable: false,\r\n\t                position: new go.Point(33, 26)\r\n\t            }),\r\n\t            $$(go.TextBlock, {\r\n\t                    text: \"\",\r\n\t                    font: \"normal normal bold 6px sansserif\",\r\n\t                    stroke: \"black\",\r\n\t                    textAlign: \"left\",\r\n\t                    editable: false,\r\n\t                    position: new go.Point(52, 26)\r\n\t                },\r\n\t                new go.Binding(\"text\", \"serializationNumber\", function (v) {\r\n\t                    if (v === null) return '';\r\n\t                    if (v.length > 12)\r\n\t                        return v.substring(0, 12);\r\n\t                    return v;\r\n\t                })\r\n\t            )\r\n\t        )\r\n\t    ));    \r\n\t\r\n\t    nodeMap.add(\"PhysicalComment\", $$(go.Node, go.Panel.Viewbox, {\r\n\t            name: \"PhysicalComment\",\r\n\t            locationSpot: go.Spot.Center,\r\n\t            width: 70,\r\n\t            height: 32,\r\n\t            minSize: new go.Size(17.5, 8),\r\n\t            scale: 1,\r\n\t            resizable: false,\r\n\t            selectionAdorned: true,\r\n\t            rotatable: false\r\n\t        },\r\n\t        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n\t        new go.Binding('width', 'width').makeTwoWay(),\r\n\t        new go.Binding('height', 'height').makeTwoWay(),\r\n\t        new go.Binding('scale', 'scale').makeTwoWay(),\r\n\t        new go.Binding('angle', 'angle').makeTwoWay(),\r\n\t            $$(go.Panel, \"Position\",\r\n\t                $$(go.Shape, {\r\n\t                        figure: 'Document',\r\n\t                        fill: '#ffc966',\r\n\t                        stroke: \"green\",\r\n\t                        width: 70,\r\n\t                        height: 32\r\n\t                    },\r\n\t                    new go.Binding('fill', 'colour', function(v) {\r\n\t                        if (v === 'blue') return 'lightblue';\r\n\t                        else if (v === 'red') return '#ff6666';\r\n\t                        else if (v === 'green') return 'lightgreen';\r\n\t                        else if (v === 'orange') return '#ffc966';\r\n\t                        return 'lightgreen';\r\n\t                    }),\r\n\t                    new go.Binding('stroke', 'colour')\r\n\t                ),\r\n\t                $$(go.TextBlock, {\r\n\t                        position: new go.Point(2, 2),\r\n\t                        width: 70,\r\n\t                        height: 24,\r\n\t                        text: '',\r\n\t                        stroke: 'black',\r\n\t                        editable: false,\r\n\t                        textAlign: 'center',\r\n\t                        font: 'normal normal bold 7px sansserif',\r\n\t                        wrap: go.TextBlock.WrapFit\r\n\t                    },\r\n\t                    new go.Binding('text', 'name')\r\n\t                )\r\n\t            )\r\n\t        )\r\n\t    );\r\n\t    diagram.nodeTemplateMap = nodeMap;\r\n\t    \r\n\t    // Single click\r\n\t    diagram.addDiagramListener(\"ObjectSingleClicked\", function(event){\r\n\t        if(!master) return;\r\n\t        var part = event.subject.part;\r\n\t        if(part instanceof go.Part) {\r\n\t            var nodeData = event.diagram.model.findNodeDataForKey(part.data.key);\r\n\t            if(!nodeData) return;\r\n\t            master.postMessage({\r\n\t                action:'nodeSelected',\r\n\t                parameters: {\r\n\t                    category: nodeData.category,\r\n\t                    id: nodeData.id\r\n\t                } \r\n\t            }, window.location.href);\r\n\t        }\r\n\t    }); \r\n\t    \r\n\t    // Window communication\r\n\t    var master = null;\r\n\t    window.addEventListener('message', function(event){\r\n\t        if(event.data.action === 'setMaster')\r\n\t            master = event.source;\r\n\t        else\r\n\t            messageBus[event.data.action](event.data.parameters);\r\n\t    }, false);\r\n\t    \r\n\t    // Before unloading window - reset\r\n\t    window.onbeforeunload = function(){\r\n\t        $.connection.hub.stop();\r\n\t        if(!master) return;\r\n\t        master.postMessage({\r\n\t            action:'windowClosed',\r\n\t            parameters: window.name\r\n\t        }, window.location.href);\r\n\t    }\r\n\t    \r\n\t    // Message bus        \r\n\t    var messageBus = {\r\n\t        nodeAdded: function(node){\r\n\t            diagram.model.addNodeData(node);\r\n\t            node._nodeKey = diagram.model.getKeyForNodeData(node);\r\n\t            node._node = diagram.findPartForKey(node._nodeKey);\r\n\t            window.diagram.nodes.push(node);\r\n\t        },\r\n\t        nodesAdded: function(nodes){\r\n\t            for(var i=0; i<nodes.length; i++)\r\n\t                messageBus.nodeAdded(nodes[i]);\r\n\t        },\r\n\t        nodeRemoved: function(parameters){\r\n\t            var nodes = diagram.model.nodeDataArray.filter(function(node){\r\n\t                if(node.category === parameters.category && node.name === parameters.name) return true;\r\n\t                return false;\r\n\t            });\r\n\t            if(!nodes.length) return;\r\n\t            diagram.model.removeNodeData(nodes[0]);\r\n\t            removeNode(nodes[0]);\r\n\t        },\r\n\t        flowAdded: function(parameters){\r\n\t            var node = findNode(parameters.valveType, parameters.valveId);\r\n\t            if(!node) return;\r\n\t            node.flows.push(parameters.flow);\r\n\t        },\r\n\t        flowDeleted: function(parameters){\r\n\t            var node = findNode(parameters.valveType, parameters.valveId);\r\n\t            if(!node) return;\r\n\t            var flowIndex = findFlowIndex(node, parameters.flowId);\r\n\t            if(flowIndex === -1) return;\r\n\t            node.flows.splice(flowIndex, 1);\r\n\t        },\r\n\t        routeChanged: function(parameters){\r\n\t            var node = findNode(parameters.valveType, parameters.valveId);\r\n\t            if(!node) return;\r\n\t            var flow = findFlow(node, parameters.flowId);\r\n\t            if(!flow) return;\r\n\t            var routes = flow.routes.filter(function(route){\r\n\t                if(route.id === parameters.change.id) return true;\r\n\t                return false;\r\n\t            });\r\n\t            if(!routes.length) return;\r\n\t            routes[0][parameters.change.property] = parameters.change.value;\r\n\t        }\r\n\t    }\r\n\t   \r\n\t    // Inititlise diagram \r\n\t    setTimeout(function(){\r\n\t        var canvas = diagram.div.children[0];        \r\n\t        loadBackground(diagram, canvas); \r\n\t        setTimeout(function(){\r\n\t            loadNodes(); \r\n\t            loadComments();\r\n\t        }, 200);      \r\n\t    }, 500);\r\n\t\r\n\t    // Find node\r\n\t    function findNode(type, id){\r\n\t        var nodes = diagram.model.nodeDataArray.filter(function(node){\r\n\t            if(node.category === type && node.id === id) return true;\r\n\t            return false;\r\n\t        });\r\n\t        if(nodes.length)\r\n\t            return nodes[0];\r\n\t        return null;\r\n\t    }\r\n\t\r\n\t    // Find flow\r\n\t    function findFlow(valve, flowId){\r\n\t        var flows = valve.flows.filter(function(flow){\r\n\t            if(flow.id === flowId) return true;\r\n\t            return false;\r\n\t        });\r\n\t        if(flows.length)\r\n\t            return flows[0];\r\n\t        return null;\r\n\t    }\r\n\t\r\n\t    // Find flow index\r\n\t    function findFlowIndex(valve, flowId){\r\n\t        for(var i=0; i<valve.flows.length; i++){\r\n\t            if(valve.flows[i].id === flowId)\r\n\t                return i;\r\n\t        }\r\n\t        return -1;\r\n\t    }\r\n\t    \r\n\t    // Remove node\r\n\t    function removeNode(node){\r\n\t        var nodeCount = window.diagram.nodes.length;\r\n\t        while(nodeCount--){\r\n\t            if(window.diagram.nodes[nodeCount].category === node.category && window.diagram.nodes[nodeCount].id === node.id)\r\n\t                window.diagram.nodes.splice(nodeCount, 1);\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    // Load diagram background\r\n\t    function loadBackground(diagram, canvas){        \r\n\t        switch(window.diagram.fileType){\r\n\t            case 'PNG':\r\n\t            case 'JPG':\r\n\t                loadRasterImage(diagram, canvas);\r\n\t                break;\r\n\t            case 'SVG':\r\n\t                loadVectorImage(diagram, canvas);\r\n\t                break;\r\n\t            case 'BLANK':\r\n\t                loadBlank(diagram, canvas);\r\n\t                break;\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    // Load raster image - PNG/JPG\r\n\t    function loadRasterImage(diagram, canvas){\r\n\t        var img = new Image();\r\n\t        img.onload = function(){\r\n\t            diagram.add($$(go.Part, {\r\n\t                    layerName: 'Background',\r\n\t                    position: new go.Point(0, 0),\r\n\t                    selectable: false,\r\n\t                    pickable: false,\r\n\t                    resizable: true\r\n\t                },\r\n\t                $$(go.Picture, {desiredSize: new go.Size(window.diagram.width, window.diagram.height), element:img, margin:2})\r\n\t            ));\r\n\t        }\r\n\t        img.src = window.diagram.base64;\r\n\t    }\r\n\t\r\n\t    // Load vector image - SVG       \r\n\t    function loadVectorImage(diagram, canvas){\r\n\t        // Hack to force the browser to fetch from the server each time, appending unique query string\r\n\t        var imageSource = window.diagram.baseUrl + window.diagram.path + '?' + (new Date() / 1000);\r\n\t        diagram.add($$(go.Part, {\r\n\t                layerName: 'Background',\r\n\t                position: new go.Point(0, 0),\r\n\t                selectable: false,\r\n\t                pickable: false,\r\n\t                resizable: true\r\n\t            },\r\n\t            $$(go.Picture, {desiredSize:new go.Size(window.diagram.width, window.diagram.height), source:imageSource, margin:2})\r\n\t        ));\r\n\t    }\r\n\t    \r\n\t    // Load blank diagram\r\n\t    function loadBlank(diagram, canvas){\r\n\t        canvas.style.backgroundColor = '#E8E8E8';\r\n\t        canvas.style.width = '100%';\r\n\t        canvas.style.height = '100%';\r\n\t    }\r\n\t    \r\n\t    // Load nodes\r\n\t    function loadNodes(){\r\n\t        for(var n=0; n<window.diagram.nodes.length; n++){\r\n\t            diagram.model.addNodeData(window.diagram.nodes[n]);\r\n\t            window.diagram.nodes[n]._nodeKey = diagram.model.getKeyForNodeData(window.diagram.nodes[n]);\r\n\t            window.diagram.nodes[n]._node = diagram.findPartForKey(window.diagram.nodes[n]._nodeKey);\r\n\t        }\r\n\t    }\r\n\t\r\n\t    // Load comments\r\n\t    function loadComments(){\r\n\t        for(var c=0; c<window.diagram.comments.length; c++){\r\n\t            diagram.model.addNodeData(window.diagram.comments[c]);\r\n\t            window.diagram.comments[c]._nodeKey = diagram.model.getKeyForNodeData(window.diagram.comments[c]);\r\n\t            window.diagram.comments[c]._node = diagram.findPartForKey(window.diagram.comments[c]._nodeKey);\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    // Window resized event\r\n\t    window.onresize = function(){\r\n\t        var div = diagram.div;\r\n\t        div.style.width = window.innerWidth;\r\n\t        div.style.width = window.innerHeight;\r\n\t        diagram.requestUpdate();\r\n\t    }\r\n\t    \r\n\t    // Signalr\r\n\t    $.connection.hub.qs = { 'access_token': window.accessToken };\r\n\t    $.connection.hub.url = window.diagram.baseUrl + \"/signalr\";\r\n\t    $.connection.hub.start();\r\n\t    $.connection.spikeHub.client.opcDataChange = function(entityType, key, property, value) {\r\n\t        var nodes = window.diagram.nodes.filter(function(node){\r\n\t            if(node.category === entityType && node.id === key) return true;\r\n\t            return false;\r\n\t        })\r\n\t        if(!nodes.length) return;\r\n\t        var node = nodes[0];\r\n\t        node[property] = value;\r\n\t        node._node.updateTargetBindings(property);       \r\n\t    };\r\n\t\r\n\t    // Alarms\r\n\t    var inAlarm = true;\r\n\t    function interruptHandler(){\r\n\t        if(!window.diagram.nodes){\r\n\t            setTimeout(interruptHandler, 500);\r\n\t            return;\r\n\t        }\r\n\t        for(var n=0; n<window.diagram.nodes.length; n++){\r\n\t            var node = window.diagram.nodes[n];\r\n\t            if (!node.isInAlarm && node.alarm) {\r\n\t                node.alarm = false;\r\n\t                node._node.updateTargetBindings('alarm');\r\n\t            } else if (node.isInAlarm) {\r\n\t                node.alarm = inAlarm;\r\n\t                node._node.updateTargetBindings('alarm');\r\n\t            }\r\n\t        }\r\n\t        inAlarm = !inAlarm;\r\n\t        setTimeout(interruptHandler, 500);    \r\n\t    }\r\n\t    setTimeout(interruptHandler, 500);\r\n\t    \r\n\t})();\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// window.6c7fefca888eb181bc42.bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/app/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6c7fefca888eb181bc42","(function () {\r\n    'use strict';\r\n    \r\n    // Private Variables\r\n    var $$ = go.GraphObject.make;\r\n    var diagram = $$(go.Diagram, 'diagram');\r\n    var nodeMap = new go.Map(\"string\", go.Part);\r\n   \r\n    // Bind mouse wheel as diagram zoom\r\n    diagram.toolManager.mouseWheelBehavior = go.ToolManager.WheelZoom;\r\n    diagram.commandHandler.arrowKeyBehavior = \"move\";\r\n\r\n    // Configure read/write permissions\r\n    diagram.allowResize = false;\r\n    diagram.allowRotate = false;\r\n    diagram.allowSelect = true;\r\n    diagram.allowCopy = false;\r\n    diagram.allowUndo = false;\r\n    diagram.allowDelete = false;\r\n    diagram.allowMove = false;\r\n    diagram.scrollMode = go.Diagram.InfiniteScroll;\r\n    \r\n    // Tooltip\r\n    var tooltipTemplate = $$(go.Adornment, 'Auto',\r\n        $$(go.Shape, {fill: '#428FD4'}),\r\n        $$(go.TextBlock, {margin: 4}, new go.Binding(\"text\", \"name\"))\r\n    );\r\n    \r\n    // Brushes\r\n    var brush = {\r\n        off: $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#808080\",\r\n            1.0: \"#666666\"\r\n        }),\r\n        on: $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#44e421\",\r\n            1.0: \"#49c12f\"\r\n        }),\r\n        on2: $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#227210\",\r\n            1.0: \"#246017\"\r\n        }),\r\n        alarm: $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#f21818\",\r\n            1.0: \"#f73b3b\"\r\n        }),\r\n        interlock: $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#f5eb32\",\r\n            1.0: \"#fee80b\"\r\n        }),\r\n        grey: $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#c6d1dd\",\r\n            1.0: \"#98a3ae\"\r\n        }),\r\n        blue: $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#6666FF\",\r\n            1.0: \"#6666FF\"\r\n        }),\r\n        magenta: $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#FF00FF\",\r\n            1.0: \"#FF00FF\"\r\n        }),\r\n        purple: $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#663399\",\r\n            1.0: \"#663399\"\r\n        }),\r\n        yellow: $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#ffff00\",\r\n            1.0: \"#ffff19\"\r\n        }),\r\n        amber: $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#FFBF00\",\r\n            1.0: \"#FFBF00\"\r\n        }),\r\n        display: $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#4D9EFF\",\r\n            1.0: \"#4CC4FF\"\r\n        }),\r\n        hal:  $$(go.Brush, go.Brush.Linear, {\r\n            0.0: \"#3D8CD1\",\r\n            1.0: \"#2C7EC7\"\r\n        })\r\n    };\r\n    brush.red = brush.alarm;\r\n    brush.green = brush.on;\r\n\r\n    // Valve blade state\r\n    var valveBladeState = Object.freeze({\r\n        Closed: 'Closed',\r\n        Input: 'Input',\r\n        Output: 'Output'\r\n    });\r\n    \r\n     // Float value convert\r\n    function convertFloat(val) {\r\n        var float = parseFloat(parseFloat(val).toFixed(1));\r\n        if (float < -999999.9) return '-E';\r\n        if (float > 999999.9) return 'E';\r\n        else return float.toString().replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n    }\r\n    \r\n    // Get OEE Status colour\r\n    function getOEEStatusColour(val, type){\r\n        switch(val){\r\n            case 'CIP':\r\n                return brush.blue;\r\n            case 'Fault':\r\n                return brush.red;\r\n            case 'Maintenance':\r\n                return brush.yellow;\r\n            case 'Production':\r\n                return brush.green;\r\n            case 'QA_Held':\r\n                return brush.amber;\r\n            case 'Setup':\r\n                return brush.yellow;\r\n            default:\r\n                if(type === 'S88Unit')\r\n                    return brush.magenta;\r\n                return brush.purple;\r\n        }\r\n    }\r\n\r\n    // Get valve flow\r\n    function getFlow(name, node){\r\n        for(var i=0; i<node.flows.length; i++){\r\n            if(name === node.flows[i].name){\r\n                node.flows[i].routes.sort(function(a, b){ if(a.id > b.id) {return 1;} if(a.id < b.id) {return -1;} return 0;});\r\n                return node.flows[i];\r\n            }\r\n        }\r\n        return null;\r\n    } \r\n\r\n    // Get valve blade color for flow\r\n    function getBladeColor(blade, value, obj){\r\n        if(!value) return brush.grey;\r\n        var flow = getFlow(value, obj.part.data);\r\n        if(flow && flow.routes.length && (flow.routes[0]['blade'+blade]===valveBladeState.Input||flow.routes[0]['blade'+blade]===valveBladeState.Output))\r\n            return brush.on;\r\n        if(flow && flow.routes.length > 1 && (flow.routes[1]['blade'+blade]===valveBladeState.Input||flow.routes[1]['blade'+blade]===valveBladeState.Output))\r\n            return brush.on2;\r\n        return brush.grey;\r\n    }\r\n\r\n    // Get valve blade visibility for flow\r\n    function getBladeVisibility(blade, direction, value, obj){\r\n        if(!value) return false;\r\n        var visible = false;\r\n        var flow = getFlow(value, obj.part.data);\r\n        if(!flow) return false;\r\n        flow.routes.forEach(function(route, index){\r\n            if(route['blade'+blade] === direction)\r\n                visible = true;\r\n        });\r\n        return visible;\r\n    }\r\n    \r\n    // Adornments\r\n    var selectionAdornment = $$(go.Adornment, \"Auto\", \r\n        $$(go.Shape, { \r\n            fill: null, \r\n            stroke: \"deepskyblue\", \r\n            strokeWidth: 1.5\r\n        }),\r\n        $$(go.Placeholder)\r\n    );\r\n\r\n    /* S88 Model */\r\n    // Analogue Input\r\n    nodeMap.add(\"AnalogueInputModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"AnalogueInputModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 132,\r\n            height: 16,\r\n            minSize: new go.Size(33, 4),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: \"AnalogueInputModel\",\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Rectangle\", {\r\n                    position: new go.Point(0, 0),\r\n                    fill: brush.grey,\r\n                    width: 24,\r\n                     height: 16\r\n                },\r\n                new go.Binding(\"fill\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(0, 1.6),\r\n                text: \"AI\",\r\n                font: \"normal normal bold 12.8px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"center\",\r\n                editable: false,\r\n                width: 24\r\n            }),\r\n            $$(go.Shape, \"Rectangle\", {\r\n                position: new go.Point(24, 0),\r\n                fill: brush.display,\r\n                width: 108,\r\n                height: 16\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(24, 1.6),\r\n                    text: \"0.0\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    isMultiline: false,\r\n                    textAlign: \"end\",\r\n                    width: 60\r\n                },\r\n                new go.Binding(\"text\", \"value\", convertFloat)\r\n            ),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(85, 1.6),\r\n                    text: \"\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    width: 48\r\n                },\r\n                new go.Binding(\"text\", \"engineeringUnits\", function (v) {\r\n                    return v.replace(\"_\", \"/\");\r\n                })\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Analogue Output\r\n    nodeMap.add(\"AnalogueOutputModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"AnalogueOutputModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 132,\r\n            height: 16,\r\n            minSize: new go.Size(33, 4),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: \"AnalogueOutputModel\",\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Rectangle\", {\r\n                    position: new go.Point(0, 0),\r\n                    fill: brush.grey,\r\n                    width: 24,\r\n                    height: 16\r\n                },\r\n                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(0, 1.6),\r\n                text: \"AO\",\r\n                font: \"normal normal bold 12.8px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"center\",\r\n                editable: false,\r\n                width: 24\r\n            }),\r\n            $$(go.Shape, \"Rectangle\", {\r\n                position: new go.Point(24, 0),\r\n                fill: brush.display,\r\n                width: 108,\r\n                height: 16\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(24, 1.6),\r\n                    text: \"0.0\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    isMultiline: false,\r\n                    textAlign: \"end\",\r\n                    width: 60\r\n                },\r\n                new go.Binding(\"text\", \"value\", convertFloat)\r\n            ),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(85, 1.6),\r\n                    text: \"\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    width: 48\r\n                },\r\n                new go.Binding(\"text\", \"engineeringUnits\", function (v) {\r\n                    return v.replace(\"_\", \"/\");\r\n                })\r\n            ),\r\n            $$(go.Shape, \"rectangle\", {\r\n                    fill: brush.interlock,\r\n                    stroke: brush.interlock,\r\n                    width: 1.6,\r\n                    height: 26.4,\r\n                    angle: 122,\r\n                    visible: true\r\n                },\r\n                new go.Binding(\"visible\", \"isInterlocked\")\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Control Valve\r\n    nodeMap.add(\"ControlValveModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"ControlValveModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 32,\r\n            height: 32,\r\n            minSize: new go.Size(8, 8),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: \"ControlValveModel\",\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"rectangle\", {\r\n                    position: new go.Point(14, 1),\r\n                    fill: brush.grey,\r\n                    height: 23,\r\n                    width: 4,\r\n                    stroke: \"black\"\r\n                },\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, {\r\n                    fill: brush.grey,\r\n                    geometryString: \"F M0 4 Q16 -4 31 4 L 0 4\",\r\n                    stroke: \"black\"\r\n                },\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"triangle\", {\r\n                    position: new go.Point(0, 16),\r\n                    width: 16,\r\n                    height: 16,\r\n                    angle: 90,\r\n                    fill: brush.grey,\r\n                    stroke: \"black\"\r\n                },\r\n                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                }),\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"triangle\", {\r\n                    position: new go.Point(16, 16),\r\n                    width: 16,\r\n                    height: 16,\r\n                    angle: 270,\r\n                    fill: brush.grey,\r\n                    stroke: \"black\"\r\n                },\r\n                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                }),\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"rectangle\", {\r\n                    fill: brush.interlock,\r\n                    stroke: brush.interlock,\r\n                    width: 2,\r\n                    height: 43,\r\n                    angle: 135,\r\n                    visible: false\r\n                },\r\n                new go.Binding(\"visible\", \"isInterlocked\")\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Digital Input\r\n    function digitalInput(name) {\r\n        return $$(go.Part, go.Panel.Viewbox, {\r\n                name: name,\r\n                locationSpot: go.Spot.Center,\r\n                width: 26,\r\n                height: 26,\r\n                minSize: new go.Size(6.5, 6.5),\r\n                scale: 1,\r\n                toolTip: tooltipTemplate,\r\n                selectionAdorned: true,\r\n                selectionObjectName: name,\r\n                selectionAdornmentTemplate: selectionAdornment\r\n            },\r\n            new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n            new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n            new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n            new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n            new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n            $$(go.Panel, \"Position\",\r\n                $$(go.Panel, \"Position\",\r\n                    $$(go.Shape, \"circle\", {\r\n                            fill: brush.grey,\r\n                            stroke: \"black\",\r\n                            width: 26\r\n                        },\r\n                        new go.Binding(\"fill\", \"value\", function (v) {\r\n                            if (v) return brush.on;\r\n                            return brush.grey;\r\n                        }),\r\n                        new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                            if (v) return brush.alarm;\r\n                            return \"black\";\r\n                        })\r\n                    ),\r\n                    $$(go.TextBlock, {\r\n                            position: new go.Point(3.5, 3),\r\n                            text: \"DI\",\r\n                            stroke: \"black\",\r\n                            editable: false,\r\n                            textAlign: \"center\",\r\n                            font: \"normal normal bold 18px sansserif\"\r\n                        },\r\n                        new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                            if (v) return brush.alarm;\r\n                            return \"black\";\r\n                        })\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n    nodeMap.add(\"DigitalInputModel\", digitalInput(\"DigitalInputModel\"));\r\n    nodeMap.add(\"S95DigitalInputModel\", digitalInput(\"S95DigitalInputModel\"));\r\n\r\n    // Digital Output\r\n    function digitalOutput(name) {\r\n        return $$(go.Part, go.Panel.Viewbox, {\r\n                name: name,\r\n                locationSpot: go.Spot.Center,\r\n                width: 32,\r\n                height: 32,\r\n                minSize: new go.Size(8, 8),\r\n                scale: 1,\r\n                toolTip: tooltipTemplate,\r\n                selectionAdorned: true,\r\n                selectionObjectName: name,\r\n                selectionAdornmentTemplate: selectionAdornment\r\n            },\r\n            new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n            new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n            new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n            new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n            new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n            $$(go.Panel, \"Position\",\r\n                $$(go.Shape, \"Rectangle\", {\r\n                        fill: brush.grey,\r\n                        stroke: \"black\",\r\n                        width: 32,\r\n                        height: 32\r\n                    },\r\n                    new go.Binding(\"fill\", \"value\", function (v) {\r\n                        if (v) return brush.on;\r\n                        return brush.grey;\r\n                    }),\r\n                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                        if (v) return brush.alarm;\r\n                        return \"black\";\r\n                    })\r\n                ),\r\n                $$(go.TextBlock, {\r\n                        position: new go.Point(0.5, 6),\r\n                        text: \"DO\",\r\n                        stroke: \"black\",\r\n                        editable: false,\r\n                        textAlign: \"center\",\r\n                        font: \"normal normal bold 18px sansserif\",\r\n                        width: 32\r\n                    },\r\n                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                        if (v) return brush.alarm;\r\n                        return \"black\";\r\n                    })),\r\n                $$(go.Shape, \"rectangle\", {\r\n                        fill: brush.interlock,\r\n                        stroke: brush.interlock,\r\n                        width: 2,\r\n                        height: 43,\r\n                        angle: 135,\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"isInterlocked\")\r\n                )\r\n            )\r\n        );\r\n    }\r\n    nodeMap.add(\"DigitalOutputModel\", digitalOutput(\"DigitalOutputModel\"));\r\n    nodeMap.add(\"S95DigitalOutputModel\", digitalOutput(\"S95DigitalOutputModel\"));\r\n\r\n    // Flow Meter\r\n    nodeMap.add(\"FlowMeterModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"FlowMeterModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 132,\r\n            height: 16,\r\n            minSize: new go.Size(33, 4),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'FlowMeterModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Rectangle\", {\r\n                    position: new go.Point(0, 0),\r\n                    fill: brush.grey,\r\n                    width: 24,\r\n                    height: 16\r\n                },\r\n                new go.Binding(\"fill\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(0, 1.6),\r\n                text: \"FL\",\r\n                font: \"normal normal bold 12.8px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"center\",\r\n                editable: false,\r\n                width: 24\r\n            }),\r\n            $$(go.Shape, \"Rectangle\", {\r\n                position: new go.Point(24, 0),\r\n                fill: brush.display,\r\n                width: 108,\r\n                height: 16\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(24, 1.6),\r\n                    text: \"0.0\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    isMultiline: false,\r\n                    textAlign: \"end\",\r\n                    width: 60\r\n                },\r\n                new go.Binding(\"text\", \"value\", convertFloat)\r\n            ),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(85, 1.6),\r\n                    text: \"other\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    width: 48\r\n                },\r\n                new go.Binding(\"text\", \"engineeringUnits\", function (v) {\r\n                    return v.replace(\"_\", \"/\");\r\n                })\r\n            ))\r\n    ));\r\n\r\n    // Hygienic Status\r\n    nodeMap.add(\"HygienicStatusModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"HygienicStatusModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 132,\r\n            height: 16,\r\n            minSize: new go.Size(33, 4),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'HygienicStatusModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Rectangle\", {\r\n                position: new go.Point(0, 0),\r\n                fill: brush.grey,\r\n                width: 32,\r\n                height: 16\r\n            }\r\n            ),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(0, 1.6),\r\n                text: \"HYG\",\r\n                font: \"normal normal bold 12.8px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"center\",\r\n                editable: false,\r\n                width: 32\r\n            }),\r\n            $$(go.Shape, \"Rectangle\", {\r\n                position: new go.Point(32, 0),\r\n                fill: brush.display,\r\n                width: 108,\r\n                height: 16\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(32, 1.6),\r\n                    width: 96,\r\n                    text: \"workCentreOutOfSpec\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    isMultiline: false,\r\n                    textAlign: \"center\"\r\n                },\r\n                new go.Binding(\"text\", \"value\")\r\n            )\r\n        )\r\n    ));\r\n\r\n    // PID\r\n    nodeMap.add(\"PIDModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"PIDModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 86,\r\n            height: 48,\r\n            minSize: new go.Size(21.5, 12),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'PIDModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n                $$(go.Shape, \"Rectangle\", {\r\n                    position: new go.Point(24, 0),\r\n                    fill: brush.display,\r\n                    width: 62,\r\n                    height: 48\r\n                }),\r\n            $$(go.Shape, \"Rectangle\", {\r\n                    position: new go.Point(0, 0),\r\n                    fill: brush.grey,\r\n                    width: 24,\r\n                    height: 16\r\n                },\r\n                new go.Binding(\"fill\", \"isControlling\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(0, 1.6),\r\n                text: \"PV\",\r\n                font: \"normal normal bold 12.8px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"center\",\r\n                editable: false,\r\n                width: 24\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(24, 1.6),\r\n                    text: \"0.0\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    isMultiline: false,\r\n                    textAlign: \"end\",\r\n                    width: 60\r\n                },\r\n                new go.Binding(\"text\", \"processVariable\", convertFloat)\r\n            ),\r\n            $$(go.Shape, \"Rectangle\", {\r\n                    position: new go.Point(0, 16),\r\n                    fill: brush.grey,\r\n                    width: 24,\r\n                    height: 16\r\n                },\r\n                new go.Binding(\"fill\", \"isControlling\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(0, 17.6),\r\n                text: \"SP\",\r\n                font: \"normal normal bold 12.8px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"center\",\r\n                editable: false,\r\n                width: 24\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(24, 17.6),\r\n                    text: \"0.0\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    isMultiline: false,\r\n                    textAlign: \"end\",\r\n                    width: 60\r\n                },\r\n                new go.Binding(\"text\", \"setPoint\", convertFloat)\r\n            ),\r\n            $$(go.Shape, \"Rectangle\", {\r\n                    position: new go.Point(0, 32),\r\n                    fill: brush.grey,\r\n                    width: 24,\r\n                    height: 16\r\n                },\r\n                new go.Binding(\"fill\", \"isControlling\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(0, 33.6),\r\n                text: \"OP\",\r\n                font: \"normal normal bold 12.8px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"center\",\r\n                editable: false,\r\n                width: 24\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(24, 33.6),\r\n                    text: \"0.0\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    isMultiline: false,\r\n                    textAlign: \"end\",\r\n                    width: 60\r\n                },\r\n                new go.Binding(\"text\", \"output\", convertFloat)\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Portable Tank\r\n    nodeMap.add(\"PortableTankModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"PortableTankModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 32,\r\n            height: 38,\r\n            minSize: new go.Size(8, 9.5),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'PortableTankModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Circle\", {\r\n                position: new go.Point(2, 30),\r\n                fill: \"black\",\r\n                stroke: \"black\",\r\n                width: 8,\r\n                height: 8\r\n            }),\r\n            $$(go.Shape, \"Circle\", {\r\n                position: new go.Point(4, 32),\r\n                fill: brush.grey,\r\n                stroke: \"black\",\r\n                width: 4,\r\n                height: 4\r\n            }),\r\n            $$(go.Shape, \"Circle\", {\r\n                position: new go.Point(22, 30),\r\n                fill: \"black\",\r\n                stroke: \"black\",\r\n                width: 8,\r\n                height: 8\r\n            }),\r\n            $$(go.Shape, \"Circle\", {\r\n                position: new go.Point(24, 32),\r\n                fill: brush.grey,\r\n                stroke: \"black\",\r\n                width: 4,\r\n                height: 4\r\n            }),\r\n            $$(go.Shape, {\r\n                figure: \"Cylinder1\",\r\n                fill: brush.grey,\r\n                stroke: \"black\",\r\n                width: 32,\r\n                height: 32\r\n            }),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(0.8, 7),\r\n                text: \"PT\",\r\n                font: \"normal normal bold 12px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"center\",\r\n                editable: false,\r\n                width: 32\r\n            }),\r\n            $$(go.Shape, \"Ellipse\", {\r\n                    position: new go.Point(13.5, 18),\r\n                    fill: \"black\",\r\n                    stroke: \"black\",\r\n                    width: 5,\r\n                    height: 5,\r\n                    visible: false\r\n                },\r\n                new go.Binding(\"visible\", \"value\", function (v) {\r\n                    if (v === \"Docked\" || v === \"CleaningStationDocked\" || v === \"TubeSetConnected\") return true;\r\n                    return false;\r\n                })\r\n            ),\r\n            $$(go.Shape, \"Triangle\", {\r\n                    position: new go.Point(13.5, 20),\r\n                    fill: \"black\",\r\n                    stroke: \"black\",\r\n                    width: 5,\r\n                    height: 8,\r\n                    visible: false\r\n                },\r\n                new go.Binding(\"visible\", \"value\", function (v) {\r\n                    if (v === \"Docked\" || v === \"CleaningStationDocked\" || v === \"TubeSetConnected\") return true;\r\n                    return false;\r\n                })\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Single Use Container\r\n    nodeMap.add(\"SingleUseContainerModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"SingleUseContainerModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 32,\r\n            height: 40,\r\n            minSize: new go.Size(8, 9.5),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'SingleUseContainerModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Circle\", {\r\n                position: new go.Point(4, 31),\r\n                fill: \"black\",\r\n                stroke: \"black\",\r\n                width: 8,\r\n                height: 8\r\n            }),\r\n            $$(go.Shape, \"Circle\", {\r\n                position: new go.Point(6, 33),\r\n                fill: brush.grey,\r\n                stroke: \"black\",\r\n                width: 4,\r\n                height: 4\r\n            }),\r\n            $$(go.Shape, \"Circle\", {\r\n                position: new go.Point(20, 31),\r\n                fill: \"black\",\r\n                stroke: \"black\",\r\n                width: 8,\r\n                height: 8\r\n            }),\r\n            $$(go.Shape, \"Circle\", {\r\n                position: new go.Point(22, 33),\r\n                fill: brush.grey,\r\n                stroke: \"black\",\r\n                width: 4,\r\n                height: 4\r\n            }),\r\n            $$(go.Shape, {\r\n                    figure: \"ManualOperation\",\r\n                    fill: brush.grey,\r\n                    stroke: \"black\",\r\n                    width: 32,\r\n                    height: 32\r\n                },\r\n                new go.Binding(\"fill\", \"singleUseStatus\", function (v) {\r\n                    switch (v) {\r\n                        case \"BagSetup\":\r\n                        case \"BagDisposal\":\r\n                        case \"ProbeInstall\":\r\n                        case \"TubeSetInstall\":\r\n                            return brush.yellow;\r\n                        case \"InUse\":\r\n                            return brush.green;\r\n                        case \"Dirty\":\r\n                            return brush.red;\r\n                        case \"QA_Held\":\r\n                            return brush.amber;\r\n                        default:\r\n                            return brush.grey;\r\n                    }\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(0.8, 0.5),\r\n                text: \"SU\",\r\n                font: \"normal normal bold 12px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"center\",\r\n                editable: false,\r\n                width: 32\r\n            }),\r\n            $$(go.Shape, \"Ellipse\", {\r\n                    position: new go.Point(13, 14),\r\n                    fill: \"black\",\r\n                    stroke: \"black\",\r\n                    width: 6,\r\n                    height: 6,\r\n                    visible: false\r\n                },\r\n                new go.Binding(\"visible\", \"value\", function (v) {\r\n                    if (v === \"Docked\" || v === \"CleaningStationDocked\" || v === \"TubeSetConnected\") return true;\r\n                    return false;\r\n                })\r\n            ),\r\n            $$(go.Shape, \"Triangle\", {\r\n                    position: new go.Point(12, 16),\r\n                    fill: \"black\",\r\n                    stroke: \"black\",\r\n                    width: 8,\r\n                    height: 12,\r\n                    visible: false\r\n                },\r\n                new go.Binding(\"visible\", \"value\", function (v) {\r\n                    if (v === \"Docked\" || v === \"CleaningStationDocked\" || v === \"TubeSetConnected\") return true;\r\n                    return false;\r\n                })\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Pump\r\n    nodeMap.add(\"PumpModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"PumpModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 32,\r\n            height: 32,\r\n            minSize: new go.Size(8, 8),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'PumpModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"circle\", {\r\n                    fill: brush.grey,\r\n                    visible: true,\r\n                    stroke: \"black\",\r\n                    width: 32\r\n                },\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"triangle\", {\r\n                    position: new go.Point(8, 7),\r\n                    stroke: \"black\",\r\n                    fill: brush.off,\r\n                    width: 18,\r\n                    height: 18,\r\n                    angle: 90,\r\n                    visible: true\r\n                },\r\n                new go.Binding(\"fill\", \"isRunning\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.off;\r\n                }),\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"rectangle\", {\r\n                    fill: brush.interlock,\r\n                    stroke: brush.interlock,\r\n                    width: 2,\r\n                    height: 42,\r\n                    angle: 135,\r\n                    visible: false\r\n                },\r\n                new go.Binding(\"visible\", \"isInterlocked\")\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Single Speed Motor\r\n    nodeMap.add(\"SingleSpeedMotorModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"SingleSpeedMotorModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 32,\r\n            height: 32,\r\n            minSize: new go.Size(8, 8),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'SingleSpeedMotorModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"circle\", {\r\n                    fill: brush.grey,\r\n                    visible: true,\r\n                    stroke: \"black\",\r\n                    width: 32\r\n                },\r\n                new go.Binding(\"fill\", \"isRunning\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                }),\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(0.3, 6),\r\n                    text: \"M\",\r\n                    font: \"normal normal bold 18px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    width: 32\r\n                },\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"rectangle\", {\r\n                    fill: brush.interlock,\r\n                    stroke: brush.interlock,\r\n                    width: 2,\r\n                    height: 42,\r\n                    angle: 135,\r\n                    visible: false\r\n                },\r\n                new go.Binding(\"visible\", \"isInterlocked\")\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Four Way Valve\r\n    nodeMap.add(\"FourWayValveModel\", $$(go.Part, go.Panel.Viewbox, {\r\n                name: \"FourWayValveModel\",\r\n                locationSpot: go.Spot.Center,\r\n                width: 48,\r\n                height: 48,\r\n                minSize: new go.Size(8, 8),\r\n                scale: 1,\r\n                toolTip: tooltipTemplate,\r\n                selectionAdorned: true,\r\n                selectionObjectName: \"FourWayValveModel\",\r\n                selectionAdornmentTemplate: selectionAdornment\r\n            },\r\n            new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n            new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n            new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n            new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n            new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n            $$(go.Panel, \"Position\",\r\n                $$(go.Shape, \"triangle\", {\r\n                        position: new go.Point(12, 0),\r\n                        width: 24,\r\n                        height: 24,\r\n                        angle: 180,\r\n                        fill: brush.grey,\r\n                        stroke: \"black\"\r\n                    }, \r\n                    new go.Binding(\"fill\", \"flow\", function(value, obj){\r\n                        return getBladeColor(1, value, obj);\r\n                    }),\r\n                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                        if (v) return brush.alarm;\r\n                        return \"black\";\r\n                    }) \r\n                ),\r\n                $$(go.Shape, \"triangle\", {\r\n                        position: new go.Point(24, 12),\r\n                        width: 24,\r\n                        height: 24,\r\n                        angle: 270,\r\n                        fill: brush.grey,\r\n                        stroke: \"black\"\r\n                    },\r\n                    new go.Binding(\"fill\", \"flow\", function(value, obj){ \r\n                        return getBladeColor(2, value, obj);\r\n                    }),\r\n                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                        if (v) return brush.alarm;\r\n                        return \"black\";\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"triangle\", {\r\n                        position: new go.Point(12, 24.75),\r\n                        width: 24,\r\n                        height: 23.25,\r\n                        fill: brush.grey,\r\n                        stroke: \"black\"\r\n                    },\r\n                    new go.Binding(\"fill\", \"flow\", function(value, obj){\r\n                        return getBladeColor(3, value, obj);\r\n                    }),\r\n                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                        if (v) return brush.alarm;\r\n                        return \"black\";\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"triangle\", {\r\n                        position: new go.Point(0, 12),\r\n                        width: 24,\r\n                        height: 24,\r\n                        angle: 90,\r\n                        fill: brush.grey,\r\n                        stroke: \"black\"\r\n                    },\r\n                    new go.Binding(\"fill\", \"flow\", function(value, obj){  \r\n                        return getBladeColor(4, value, obj);\r\n                    }),\r\n                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                        if (v) return brush.alarm;\r\n                        return \"black\";\r\n                    })\r\n                ),\r\n                $$(go.TextBlock,{\r\n                    position: new go.Point(19.5, -12.75),\r\n                    text: \"1\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    font: \"normal normal bold 12px verdana\"\r\n                }),\r\n                $$(go.TextBlock,{\r\n                    position: new go.Point(49, 17.5),\r\n                    text: \"2\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    font: \"normal normal bold 12px verdana\"\r\n                }),\r\n                $$(go.TextBlock,{\r\n                    position: new go.Point(19.5, 48),\r\n                    text: \"3\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    font: \"normal normal bold 12px verdana\"\r\n                }),\r\n                $$(go.TextBlock,{\r\n                    position: new go.Point(-10, 17.5),\r\n                    text: \"4\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    font: \"normal normal bold 12px verdana\"\r\n                }),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(21.75, 2.25),\r\n                        width: 12,\r\n                        height: 4.5,\r\n                        angle: 90,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(1, valveBladeState.Input, value, obj);\r\n                    }) \r\n                ),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(21.75, 2.25),\r\n                        width: 12,\r\n                        height: 4.5,\r\n                        angle: -90,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(1, valveBladeState.Output, value, obj);\r\n                    }) \r\n                ),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(33, 21.75),\r\n                        width: 12,\r\n                        height: 4.5,\r\n                        angle: 180,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                       return getBladeVisibility(2, valveBladeState.Input, value, obj);\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(33, 21.75),\r\n                        width: 12,\r\n                        height: 4.5,\r\n                        angle: 0,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(2, valveBladeState.Output, value, obj);\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(21.75, 33),\r\n                        width: 12,\r\n                        height: 4.5,\r\n                        angle: -90,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(3, valveBladeState.Input, value, obj);\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(21.75, 33),\r\n                        width: 12,\r\n                        height: 4.5,\r\n                        angle: 90,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(3, valveBladeState.Output, value, obj);\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(2.25, 21.75),\r\n                        width: 12,\r\n                        height: 4.5,\r\n                        angle: 0,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(4, valveBladeState.Input, value, obj);\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(2.25, 21.75),\r\n                        width: 12,\r\n                        height: 4.5,\r\n                        angle: 180,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(4, valveBladeState.Output, value, obj);\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"rectangle\", {\r\n                        position: new go.Point(1, 1),\r\n                        fill: brush.interlock,\r\n                        stroke: brush.interlock,\r\n                        width: 2,\r\n                        height: 60,\r\n                        angle: 135,\r\n                        visible: false,\r\n                        strokeWidth: 2\r\n                    },\r\n                    new go.Binding(\"visible\", \"isInterlocked\")\r\n                )\r\n            )\r\n        ));\r\n\r\n        // Three Way Valve\r\n        nodeMap.add(\"ThreeWayValveModel\", $$(go.Part, go.Panel.Viewbox, {\r\n                name: \"ThreeWayValveModel\",\r\n                locationSpot: go.Spot.Center,\r\n                width: 44.8,\r\n                height: 44.8,\r\n                minSize: new go.Size(8, 8),\r\n                scale: 1,\r\n                toolTip: tooltipTemplate,\r\n                selectionAdorned: true,\r\n                selectionObjectName: \"ThreeWayValveModel\",\r\n                selectionAdornmentTemplate: selectionAdornment\r\n            },\r\n            new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n            new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n            new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n            new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n            new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n            $$(go.Panel, \"Position\",\r\n                $$(go.Shape, \"rectangle\", {\r\n                        position: new go.Point(5.6, 0),\r\n                        height: 1.4,\r\n                        width: 33.6\r\n                    },\r\n                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                        if (v) return brush.alarm;\r\n                        return \"black\";\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"rectangle\", {\r\n                        position: new go.Point(19.6, 1.4),\r\n                        fill: brush.grey,\r\n                        height: 21,\r\n                        width: 5.6,\r\n                        stroke: \"black\"\r\n                    },\r\n                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                        if (v) return brush.alarm;\r\n                        return \"black\";\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"triangle\", {\r\n                        position: new go.Point(22.4, 11.2),\r\n                        width: 22.4,\r\n                        height: 22.4,\r\n                        angle: 270,\r\n                        fill: brush.grey,\r\n                        stroke: \"black\"\r\n                    },\r\n                    new go.Binding(\"fill\", \"flow\", function(value, obj){\r\n                        return getBladeColor(1, value, obj);\r\n                    }),\r\n                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                        if (v) return brush.alarm;\r\n                        return \"black\";\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"triangle\", {\r\n                        position: new go.Point(11.2, 23.1),\r\n                        width: 22.4,\r\n                        height: 21.7,\r\n                        fill: brush.grey,\r\n                        stroke: \"black\"\r\n                    },\r\n                    new go.Binding(\"fill\", \"flow\", function(value, obj){\r\n                        return getBladeColor(2, value, obj);\r\n                    }),\r\n                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                        if (v) return brush.alarm;\r\n                        return \"black\";\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"triangle\", {\r\n                        position: new go.Point(0, 11.2),\r\n                        width: 22.4,\r\n                        height: 22.4,\r\n                        angle: 90,\r\n                        fill: brush.grey,\r\n                        stroke: \"black\"\r\n                    },\r\n                    new go.Binding(\"fill\", \"flow\", function(value, obj){\r\n                        return getBladeColor(3, value, obj);\r\n                    }),\r\n                    new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                        if (v) return brush.alarm;\r\n                        return \"black\";\r\n                    })\r\n                ),\r\n                $$(go.TextBlock,{\r\n                    position: new go.Point(45.5, 17),\r\n                    text: \"1\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    font: \"normal normal bold 10px verdana\"\r\n                }),\r\n                $$(go.TextBlock,{\r\n                    position: new go.Point(18.5, 45.5),\r\n                    text: \"2\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    font: \"normal normal bold 10px verdana\"\r\n                }),\r\n                $$(go.TextBlock,{\r\n                    position: new go.Point(-9, 17),\r\n                    text: \"3\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    font: \"normal normal bold 10px verdana\"\r\n                }),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(30.8, 20.3),\r\n                        width: 11.2,\r\n                        height: 4.2,\r\n                        angle: 180,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(1, valveBladeState.Input, value, obj);\r\n                    }) \r\n                ),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(30.8, 20.3),\r\n                        width: 11.2,\r\n                        height: 4.2,\r\n                        angle: 0,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(1, valveBladeState.Output, value, obj);\r\n                    }) \r\n                ),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(20.3, 30.8),\r\n                        width: 11.2,\r\n                        height: 4.2,\r\n                        angle: -90,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(2, valveBladeState.Input, value, obj);\r\n                    }) \r\n                ),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(20.3, 30.8),\r\n                        width: 11.2,\r\n                        height: 4.2,\r\n                        angle: 90,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(2, valveBladeState.Output, value, obj);\r\n                    }) \r\n                ),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(2.8, 20.3),\r\n                        width: 11.2,\r\n                        height: 4.2,\r\n                        angle: 0,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(3, valveBladeState.Input, value, obj);\r\n                    }) \r\n                ),\r\n                $$(go.Shape, \"arrow\", {\r\n                        position: new go.Point(2.8, 20.3),\r\n                        width: 11.2,\r\n                        height: 4.2,\r\n                        angle: 180,\r\n                        fill: 'black',\r\n                        stroke: \"black\",\r\n                        visible: false\r\n                    },\r\n                    new go.Binding(\"visible\", \"flow\", function(value, obj){\r\n                        return getBladeVisibility(3, valveBladeState.Output, value, obj);\r\n                    }) \r\n                ),\r\n                $$(go.Shape, \"rectangle\", {\r\n                        fill: brush.interlock,\r\n                        stroke: brush.interlock,\r\n                        width: 1,\r\n                        height: 41,\r\n                        angle: 135,\r\n                        visible: false,\r\n                        strokeWidth: 1\r\n                    },\r\n                    new go.Binding(\"visible\", \"isInterlocked\")\r\n                )\r\n            )\r\n        ));\r\n\r\n        // Two Way Valve\r\n        nodeMap.add(\"TwoWayValveModel\", $$(go.Part, go.Panel.Viewbox, {\r\n                name: \"TwoWayValveModel\",\r\n                locationSpot: go.Spot.Center,\r\n                width: 32,\r\n                height: 32,\r\n                minSize: new go.Size(8, 8),\r\n                scale: 1,\r\n                toolTip: tooltipTemplate,\r\n                selectionAdorned: true,\r\n                selectionObjectName: \"TwoWayValveModel\",\r\n                selectionAdornmentTemplate: selectionAdornment\r\n            },\r\n            new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n            new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n            new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n            new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n            new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n            $$(go.Panel, \"Position\",\r\n                $$(go.Shape, \"rectangle\", {\r\n                    position: new go.Point(4, 0),\r\n                    height: 1,\r\n                    width: 24\r\n                },\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"rectangle\", {\r\n                    position: new go.Point(14, 1),\r\n                    fill: brush.grey,\r\n                    height: 23,\r\n                    width: 4,\r\n                    stroke: \"black\"\r\n                },\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"triangle\", {\r\n                    position: new go.Point(0, 16),\r\n                    width: 16,\r\n                    height: 16,\r\n                    angle: 90,\r\n                    fill: brush.grey,\r\n                    stroke: \"black\"\r\n                },\r\n                new go.Binding(\"fill\", \"state\", function (v) {\r\n                    if (v === 'Open') return brush.on;\r\n                    return brush.grey;\r\n                }),\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"triangle\", {\r\n                    position: new go.Point(16, 16),\r\n                    width: 16,\r\n                    height: 16,\r\n                    angle: 270,\r\n                    fill: brush.grey,\r\n                    stroke: \"black\"\r\n                },\r\n                new go.Binding(\"fill\", \"state\", function (v) {\r\n                    if (v === 'Open') return brush.on;\r\n                    return brush.grey;\r\n                }),\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"rectangle\", {\r\n                    fill: brush.interlock,\r\n                    stroke: brush.interlock,\r\n                    width: 2,\r\n                    height: 42.5,\r\n                    angle: 135,\r\n                    visible: false\r\n                },\r\n                new go.Binding(\"visible\", \"isInterlocked\")\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Variable Speed Motor\r\n    nodeMap.add(\"VariableSpeedMotorModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"VariableSpeedMotorModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 32,\r\n            height: 32,\r\n            minSize: new go.Size(8, 8),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'VariableSpeedMotorModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, {\r\n                geometryString: \"M0 33 L33 -1\",\r\n                fill: \"black\"\r\n            }),\r\n            $$(go.Shape, {\r\n                geometryString: \"F M27 0 L32 5 L33 -1 L27 0z\",\r\n                fill: \"black\"\r\n            }),\r\n            $$(go.Shape, {\r\n                geometryString: \"F M32 5 L27 0 L33 -1 L32 5z\",\r\n                fill: \"black\"\r\n            }),\r\n            $$(go.Shape, \"circle\", {\r\n                    fill: brush.grey,\r\n                    visible: true,\r\n                    stroke: \"black\",\r\n                    width: 32\r\n                },\r\n                new go.Binding(\"fill\", \"isRunning\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                }),\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(0.5, 5.5),\r\n                    text: \"M\",\r\n                    font: \"normal normal bold 18px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    width: 32\r\n                },\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"rectangle\", {\r\n                    fill: brush.interlock,\r\n                    stroke: brush.interlock,\r\n                    width: 2,\r\n                    height: 42,\r\n                    angle: 135,\r\n                    visible: false\r\n                },\r\n                new go.Binding(\"visible\", \"isInterlocked\")\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Weigh Cell\r\n    nodeMap.add(\"WeighCellModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"WeighCellModel\",\r\n            width: 132,\r\n            height: 16,\r\n            minSize: new go.Size(33, 4),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'WeighCellModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Rectangle\", {\r\n                    position: new go.Point(0, 0),\r\n                    fill: brush.grey,\r\n                    width: 24,\r\n                    height: 16\r\n                },\r\n                new go.Binding(\"fill\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(0, 1.6),\r\n                text: \"WT\",\r\n                font: \"normal normal bold 12.8px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"center\",\r\n                editable: false,\r\n                width: 24\r\n            }),\r\n            $$(go.Shape, \"Rectangle\", {\r\n                position: new go.Point(24, 0),\r\n                fill: brush.display,\r\n                width: 108,\r\n                height: 16\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(24, 1.6),\r\n                    text: \"-135,889.9\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    isMultiline: false,\r\n                    textAlign: \"end\",\r\n                    width: 60\r\n                },\r\n                new go.Binding(\"text\", \"value\", convertFloat)\r\n            ),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(85, 1.6),\r\n                    text: \"other\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    width: 48\r\n                },\r\n                new go.Binding(\"text\", \"engineeringUnits\", function (v) {\r\n                    return v.replace(\"_\", \"/\");\r\n                })\r\n            ))\r\n    ));\r\n\r\n    // EM1 Model\r\n    nodeMap.add(\"EM1Model\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"EM1Model\",\r\n            width: 48,\r\n            height: 36,\r\n            minSize: new go.Size(12, 9),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'EM1Model',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Rectangle\", {\r\n                    stroke: \"black\",\r\n                    fill: brush.grey,\r\n                    width: 48,\r\n                    height: 36\r\n                },\r\n                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.Shape, \"Hexagon\", {\r\n                    position: new go.Point(1, 0),\r\n                    angle: 90,\r\n                    stroke: \"black\",\r\n                    fill: brush.grey,\r\n                    width: 36,\r\n                    height: 45\r\n                },\r\n                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.Shape, \"LineH\", {\r\n                position: new go.Point(1, 17.25),\r\n                stroke: \"black\",\r\n                height: 1.5,\r\n                width: 45\r\n            }),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(4.5, 7),\r\n                text: \"EM1\",\r\n                width: 39,\r\n                isMultiline: true,\r\n                editable: false,\r\n                textAlign: \"center\",\r\n                font: \"normal normal bold 8px sansserif\",\r\n                name: \"TopText\"\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(4.4, 18.3),\r\n                    text: \"\",\r\n                    width: 39,\r\n                    isMultiline: false,\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    font: \"normal normal bold 6px sansserif\",\r\n                    name: \"BottomText\"\r\n                },\r\n                new go.Binding(\"text\", \"name\", function (v) {\r\n                    if (v && v.length > 9)\r\n                        v = v.substring(0, 9);\r\n                    return v;\r\n                })\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Unit\r\n    nodeMap.add(\"S88UnitModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"S88UnitModel\",\r\n            width: 48,\r\n            height: 36,\r\n            minSize: new go.Size(12, 9),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'S88UnitModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Rectangle\", {\r\n                    stroke: \"black\",\r\n                    fill: brush.magenta,\r\n                    width: 48,\r\n                    height: 36,\r\n                    name: \"Rectangle\"\r\n                },\r\n                new go.Binding(\"fill\", \"oEEStatus\", function (v) {\r\n                    return getOEEStatusColour(v, \"S88Unit\");\r\n                })\r\n            ),\r\n            $$(go.Shape, \"Hexagon\", {\r\n                    position: new go.Point(1, 0),\r\n                    angle: 90,\r\n                    stroke: \"black\",\r\n                    fill: brush.magenta,\r\n                    width: 36,\r\n                    height: 45,\r\n                    name: \"Hexagon\"\r\n                },\r\n                new go.Binding(\"fill\", \"oEEStatus\", function (v) {\r\n                    return getOEEStatusColour(v, \"S88Unit\");\r\n                })\r\n            ),\r\n            $$(go.Shape, \"LineH\", {\r\n                position: new go.Point(1, 17.25),\r\n                stroke: \"black\",\r\n                height: 1.5,\r\n                width: 45,\r\n                name: \"LineH\"\r\n            }),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(4.5, 9),\r\n                text: \"S88UNIT\",\r\n                width: 39,\r\n                isMultiline: true,\r\n                editable: false,\r\n                textAlign: \"center\",\r\n                font: \"normal normal bold 8px sansserif\",\r\n                name: \"TopText\"\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(4.4, 18.3),\r\n                    text: \"\",\r\n                    width: 39,\r\n                    isMultiline: false,\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    font: \"normal normal bold 6px sansserif\",\r\n                    name: \"BottomText\"\r\n                },\r\n                new go.Binding(\"text\", \"name\", function (v) {\r\n                    if (v.length > 9)\r\n                        v = v.substring(0, 9);\r\n                    return v;\r\n                })\r\n            )\r\n        )\r\n    ));\r\n\r\n    /* S95 Model */\r\n    // MES Station\r\n    nodeMap.add(\"MESStationModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"MESStationModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 32,\r\n            height: 32,\r\n            minSize: new go.Size(8, 8),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'MESStationModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Rectangle\", {\r\n                fill: brush.grey,\r\n                stroke: \"black\",\r\n                width: 32,\r\n                height: 32\r\n            }),\r\n            $$(go.Shape, \"Rectangle\", {\r\n                position: new go.Point(4, 2),\r\n                fill: brush.display,\r\n                stroke: \"black\",\r\n                width: 24,\r\n                height: 18\r\n            }),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(6, 4),\r\n                text: \"MES Station X\\n   >> ....\",\r\n                stroke: \"black\",\r\n                editable: false,\r\n                textAlign: \"left\",\r\n                font: \"normal normal bold 2.5px sansserif\",\r\n                width: 22\r\n            }),\r\n            $$(go.Shape, \"Rectangle\", {\r\n                position: new go.Point(2, 24),\r\n                fill: 'black',\r\n                stroke: \"black\",\r\n                width: 28,\r\n                height: 5\r\n            })\r\n        )\r\n    ));\r\n\r\n    // Scanner\r\n    nodeMap.add(\"ScannerModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"ScannerModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 76,\r\n            height: 29,\r\n            minSize: new go.Size(19, 7.25),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'ScannerModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Rectangle\", {\r\n                    position: new go.Point(0, 0),\r\n                    fill: brush.grey,\r\n                    stroke: \"black\",\r\n                    width: 76,\r\n                    height: 29\r\n                },\r\n                new go.Binding(\"fill\", \"isScanning\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                }),\r\n                new go.Binding(\"fill\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.Shape, \"Rectangle\", {\r\n                position: new go.Point(3, 2),\r\n                fill: brush.display,\r\n                stroke: \"black\",\r\n                width: 70,\r\n                height: 25\r\n            }),\r\n            $$(go.TextBlock, {\r\n                text: \"Lot:\",\r\n                font: \"normal normal bold 6px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"left\",\r\n                editable: false,\r\n                position: new go.Point(6, 4)\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    text: \"\",\r\n                    font: \"normal normal bold 6px sansserif\",\r\n                    stroke: \"black\",\r\n                    textAlign: \"left\",\r\n                    editable: false,\r\n                    position: new go.Point(25, 4)\r\n                },\r\n                new go.Binding(\"text\", \"value\", function (v) {\r\n                    if (v === null || v.length < 2) return '';\r\n                    if (v[1] === null) return '';\r\n                    if (v[1].length > 12)\r\n                        return v[1].substring(0, 12);\r\n                    return v[1];\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                text: \"EXP:\",\r\n                font: \"normal normal bold 6px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"left\",\r\n                editable: false,\r\n                position: new go.Point(6, 11)\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    text: \"\",\r\n                    font: \"normal normal bold 6px sansserif\",\r\n                    stroke: \"black\",\r\n                    textAlign: \"left\",\r\n                    editable: false,\r\n                    position: new go.Point(25, 11)\r\n                },\r\n                new go.Binding(\"text\", \"value\", function (v) {\r\n                    if (v === null || v.length < 3) return '';\r\n                    if (v[2] === null) return '';\r\n                    var dateString = v[2].split('/');\r\n                    var year = parseInt(dateString[2]);\r\n                    var month = parseInt(dateString[1]) - 1;\r\n                    var day = parseInt(dateString[0]);\r\n                    var date = new Date(year, month, day);\r\n                    var formattedDate = moment(date).format('DD/MM/YYYY');\r\n                    if (formattedDate === 'Invalid date')\r\n                        return '';\r\n                    return formattedDate;\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                text: \"SN:\",\r\n                font: \"normal normal bold 6px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"left\",\r\n                editable: false,\r\n                position: new go.Point(6, 18)\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    text: \"\",\r\n                    font: \"normal normal bold 6px sansserif\",\r\n                    stroke: \"black\",\r\n                    textAlign: \"left\",\r\n                    editable: false,\r\n                    position: new go.Point(25, 18)\r\n                },\r\n                new go.Binding(\"text\", \"value\", function (v) {\r\n                    if (v === null || v.length < 1) return '';\r\n                    if (v[0] === null) return '';\r\n                    if (v[0].length > 12)\r\n                        return v[0].substring(0, 12);\r\n                    return v[0];\r\n                })\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Camera\r\n    nodeMap.add(\"CameraModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"CameraModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 70,\r\n            height: 50,\r\n            minSize: new go.Size(17.5, 12.5),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'CameraModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Vertical\",\r\n            $$(go.Panel, { name: 'PANEL', angle: 30 },\r\n                $$(go.Shape, \"Rectangle\", {\r\n                        position: new go.Point(0, 0),\r\n                        fill: brush.grey,\r\n                        stroke: \"black\",\r\n                        width: 7,\r\n                        height: 28\r\n                    },\r\n                    new go.Binding(\"fill\", \"state\", function (v) {\r\n                        if (v === \"Running\") return brush.on;\r\n                        return brush.off;\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"Rectangle\", {\r\n                        position: new go.Point(7, 0),\r\n                        fill: brush.grey,\r\n                        stroke: \"black\",\r\n                        width: 46,\r\n                        height: 28\r\n                    },\r\n                    new go.Binding(\"fill\", \"alarm\", function (v) {\r\n                        if (v) return brush.alarm;\r\n                        return brush.grey;\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"Rectangle\", {\r\n                        position: new go.Point(53, 0),\r\n                        fill: brush.grey,\r\n                        stroke: \"black\",\r\n                        width: 7,\r\n                        height: 28\r\n                    },\r\n                    new go.Binding(\"fill\", \"state\", function (v) {\r\n                        if (v === \"Running\") return brush.on;\r\n                        return brush.off;\r\n                    })\r\n                ),\r\n                $$(go.Shape, \"Rectangle\", {\r\n                    position: new go.Point(60, 5),\r\n                    fill: \"black\",\r\n                    stroke: \"black\",\r\n                    width: 10,\r\n                    height: 18\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(0, 0),\r\n                    text: \"\",\r\n                    font: \"normal normal bold 12px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    width: 90\r\n                },\r\n                new go.Binding(\"text\", \"value\", function (value, part) {\r\n                    return value;\r\n                })\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Printer Model\r\n    nodeMap.add(\"PrinterModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"PrinterModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 32,\r\n            height: 30,\r\n            minSize: new go.Size(8, 7.5),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'PrinterModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, {\r\n                    figure: \"Rectangle\",\r\n                    stroke: \"black\",\r\n                    width: 32,\r\n                    height: 30,\r\n                    fill: brush.grey\r\n                },\r\n                new go.Binding(\"fill\", \"isPrinting\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                }),\r\n                new go.Binding(\"fill\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.Shape, {\r\n                position: new go.Point(2, 4),\r\n                figure: \"Rectangle\",\r\n                stroke: \"black\",\r\n                width: 11,\r\n                height: 12,\r\n            }),\r\n            $$(go.Shape, {\r\n                position: new go.Point(3, 5),\r\n                figure: \"Rectangle\",\r\n                fill: brush.display,\r\n                stroke: brush.display,\r\n                width: 9,\r\n                height: 4,\r\n            }),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(4, 6),\r\n                text: \"Ready....\",\r\n                font: \"normal normal bold 2px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"center\",\r\n                editable: false,\r\n                width: 7\r\n            }),\r\n            $$(go.Shape, \"Circle\", {\r\n                position: new go.Point(7, 11.5),\r\n                fill: \"yellow\",\r\n                stroke: \"yellow\",\r\n                width: 1,\r\n                height: 1\r\n            }),\r\n            $$(go.Shape, {\r\n                position: new go.Point(15, 4),\r\n                figure: \"Rectangle\",\r\n                stroke: \"black\",\r\n                width: 15,\r\n                height: 24,\r\n            }),\r\n            $$(go.Shape, {\r\n                position: new go.Point(15, 19),\r\n                figure: \"Rectangle\",\r\n                fill: 'white',\r\n                stroke: \"black\",\r\n                width: 15,\r\n                height: 6,\r\n            }),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(17, 21.5),\r\n                text: \"N3 0069-4220-30 3  LOT A123456\",\r\n                font: \"normal normal bold 1px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"center\",\r\n                editable: false,\r\n                width: 13\r\n            })\r\n        )\r\n    ));\r\n\r\n    // Generic Equipment\r\n    nodeMap.add(\"GenericEquipmentModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"GenericEquipmentModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 32,\r\n            height: 32,\r\n            minSize: new go.Size(8, 8),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'GenericEquipmentModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, {\r\n                figure: \"StopSign\",\r\n                fill: brush.grey,\r\n                stroke: \"black\",\r\n                width: 32,\r\n                height: 32\r\n            }),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(9, 2),\r\n                text: \"GE\",\r\n                stroke: \"black\",\r\n                editable: false,\r\n                textAlign: \"center\",\r\n                font: \"normal normal bold 9px sansserif\"\r\n            }),\r\n            $$(go.Panel, \"Position\",\r\n                $$(go.Shape, \"Rectangle\", {\r\n                    position: new go.Point(2, 11.5),\r\n                    fill: brush.display,\r\n                    width: 28,\r\n                    height: 6\r\n                }),\r\n                $$(go.TextBlock, {\r\n                        position: new go.Point(3.5, 12.5),\r\n                        text: \"\",\r\n                        font: \"normal normal bold 4px sansserif\",\r\n                        stroke: \"black\",\r\n                        editable: false,\r\n                        textAlign: \"center\",\r\n                        width: 26,\r\n                        height: 6\r\n                    },\r\n                    new go.Binding(\"text\", \"value\")\r\n                )\r\n            ),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(1, 18.5),\r\n                    text: \"\",\r\n                    font: \"normal normal bold 4px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    width: 30,\r\n                    height: 6\r\n                },\r\n                new go.Binding(\"text\", \"name\", function (v) {\r\n                    if (v.length > 9)\r\n                        v = v.substring(0, 9);\r\n                    return v;\r\n                })\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Weigh Scale\r\n    nodeMap.add(\"WeighScaleModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"WeighScaleModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 108,\r\n            height: 55.1,\r\n            minSize: new go.Size(27, 13.775),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'WeighScaleModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"triangle\", {\r\n                position: new go.Point(28, 0),\r\n                fill: brush.grey,\r\n                width: 14,\r\n                height: 14\r\n            }, new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                if (v) return brush.alarm;\r\n                return \"black\";\r\n            })\r\n            ),\r\n            $$(go.Shape, {\r\n                    geometryString: \"F M35 0 L75 6.5\",\r\n                    fill: \"black\"\r\n                },\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"triangle\", {\r\n                    position: new go.Point(68, 6.5),\r\n                    fill: brush.grey,\r\n                    width: 14,\r\n                    height: 14\r\n                },\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"triangle\", {\r\n                    position: new go.Point(34, 4.5),\r\n                    fill: brush.grey,\r\n                    width: 40,\r\n                    height: 40\r\n                },\r\n                new go.Binding(\"stroke\", \"alarm\", function (v) {\r\n                    if (v) return brush.alarm;\r\n                    return \"black\";\r\n                })\r\n            ),\r\n            $$(go.Shape, \"Rectangle\", {\r\n                position: new go.Point(0, 39.1),\r\n                fill: brush.display,\r\n                width: 108,\r\n                height: 16\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(0, 40.7),\r\n                    text: \"\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    isMultiline: false,\r\n                    textAlign: \"end\",\r\n                    width: 60\r\n                },\r\n                new go.Binding(\"text\", \"value\", convertFloat)\r\n            ),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(61.6, 40.7),\r\n                    text: \"other\",\r\n                    font: \"normal normal bold 12.8px sansserif\",\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    width: 48\r\n                },\r\n                new go.Binding(\"text\", \"engineeringUnits\", function (v) {\r\n                    return v.replace(\"_\", \"/\");\r\n                })\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Work Unit\r\n    nodeMap.add(\"S95WorkUnitModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"S95WorkUnitModel\",\r\n            width: 48,\r\n            height: 36,\r\n            minSize: new go.Size(12, 9),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'S95WorkUnitModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Rectangle\", {\r\n                    stroke: \"black\",\r\n                    fill: brush.purple,\r\n                    width: 48,\r\n                    height: 36\r\n                },\r\n                new go.Binding(\"fill\", \"oEEStatus\", function (v) {\r\n                    return getOEEStatusColour(v, \"S95WorkUnit\");\r\n                })\r\n            ),\r\n            $$(go.Shape, \"Hexagon\", {\r\n                    position: new go.Point(1, 0),\r\n                    angle: 90,\r\n                    stroke: \"black\",\r\n                    fill: brush.purple,\r\n                    width: 36,\r\n                    height: 45\r\n                },\r\n                new go.Binding(\"fill\", \"oEEStatus\", function (v) {\r\n                    return getOEEStatusColour(v, \"S95WorkUnit\");\r\n                })\r\n            ),\r\n            $$(go.Shape, \"LineH\", {\r\n                position: new go.Point(1, 17.25),\r\n                stroke: \"black\",\r\n                width: 45,\r\n                height: 1.5\r\n            }),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(4.5, 9),\r\n                text: \"S95UNIT\",\r\n                width: 39,\r\n                isMultiline: true,\r\n                editable: false,\r\n                textAlign: \"center\",\r\n                font: \"normal normal bold 8px sansserif\",\r\n                name: \"TopText\"\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(4.4, 18.3),\r\n                    text: \"\",\r\n                    width: 39,\r\n                    isMultiline: false,\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    font: \"normal normal bold 6px sansserif\"\r\n                },\r\n                new go.Binding(\"text\", \"name\", function (v) {\r\n                    if (v.length > 9)\r\n                        v = v.substring(0, 9);\r\n                    return v;\r\n                })\r\n            )\r\n        )\r\n    ));\r\n\r\n    // EMUnit Model\r\n    nodeMap.add(\"EMUnitModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"EMUnitModel\",\r\n            width: 48,\r\n            height: 36,\r\n            minSize: new go.Size(12, 9),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'EMUnitModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, \"Rectangle\", {\r\n                    stroke: \"black\",\r\n                    fill: brush.grey,\r\n                    width: 48,\r\n                    height: 36\r\n                },\r\n                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.Shape, \"Hexagon\", {\r\n                    position: new go.Point(1, 0),\r\n                    angle: 90,\r\n                    stroke: \"black\",\r\n                    fill: brush.grey,\r\n                    width: 36,\r\n                    height: 45\r\n                },\r\n                new go.Binding(\"fill\", \"isOn\", function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.grey;\r\n                })\r\n            ),\r\n            $$(go.Shape, \"LineH\", {\r\n                position: new go.Point(1, 17.25),\r\n                stroke: \"black\",\r\n                height: 1.5,\r\n                width: 45\r\n            }),\r\n            $$(go.TextBlock, {\r\n                position: new go.Point(4.5, 7),\r\n                text: \"EMUnit\",\r\n                width: 39,\r\n                isMultiline: true,\r\n                editable: false,\r\n                textAlign: \"center\",\r\n                font: \"normal normal bold 8px sansserif\",\r\n                name: \"TopText\"\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(4.4, 18.3),\r\n                    text: \"\",\r\n                    width: 39,\r\n                    isMultiline: false,\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    font: \"normal normal bold 6px sansserif\",\r\n                    name: \"BottomText\"\r\n                },\r\n                new go.Binding(\"text\", \"name\", function (v) {\r\n                    if (v && v.length > 9)\r\n                        v = v.substring(0, 9);\r\n                    return v;\r\n                })\r\n            )\r\n        )\r\n    ));\r\n\r\n    // S95 Transaction Module\r\n    nodeMap.add(\"S95TransactionModuleModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"S95TransactionModuleModel\",\r\n            width: 60,\r\n            height: 60,\r\n            minSize: new go.Size(15, 15),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'S95TransactionModuleModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, {\r\n                    figure: \"DoubleEndArrow\",\r\n                    fill: brush.purple,\r\n                    stroke: \"black\",\r\n                    width: 60,\r\n                    height: 60\r\n                },\r\n                new go.Binding('fill', 'isOn', function (v) {\r\n                    if (v) return brush.on;\r\n                    return brush.purple;\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                    position: new go.Point(4.5, 25),\r\n                    text: \"\",\r\n                    width: 54,\r\n                    stroke: \"black\",\r\n                    editable: false,\r\n                    textAlign: \"center\",\r\n                    alignment: go.Spot.Center,\r\n                    font: \"normal normal bold 9px sansserif\"\r\n                },\r\n                new go.Binding(\"text\", \"name\", function (v) {\r\n                    if (v.length > 8)\r\n                        v = v.substring(0, 8);\r\n                    return v;\r\n                })\r\n            ),\r\n            $$(go.Shape, {\r\n                    figure: \"IBeamArrow\",\r\n                    position: new go.Point(24, 45),\r\n                    fill: brush.grey,\r\n                    stroke: \"black\",\r\n                    width: 15,\r\n                    height: 15,\r\n                    visible: false\r\n                },\r\n                new go.Binding(\"visible\", \"isMocked\")\r\n            )\r\n        )\r\n    ));\r\n\r\n    // Carton \r\n    nodeMap.add(\"CartonModel\", $$(go.Part, go.Panel.Viewbox, {\r\n            name: \"CartonModel\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 100,\r\n            height: 35,\r\n            minSize: new go.Size(25, 8.75),\r\n            scale: 1,\r\n            toolTip: tooltipTemplate,\r\n            selectionAdorned: true,\r\n            selectionObjectName: 'CartonModel',\r\n            selectionAdornmentTemplate: selectionAdornment\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding(\"width\", \"width\").makeTwoWay(),\r\n        new go.Binding(\"height\", \"height\").makeTwoWay(),\r\n        new go.Binding(\"scale\", \"scale\").makeTwoWay(),\r\n        new go.Binding(\"angle\", \"angle\").makeTwoWay(),\r\n        $$(go.Panel, \"Position\",\r\n            $$(go.Shape, {\r\n                figure: \"Rectangle\",\r\n                stroke: \"black\",\r\n                width: 100,\r\n                height: 35,\r\n                fill: brush.grey\r\n            }),\r\n            $$(go.Picture, {\r\n                position: new go.Point(3, 5),\r\n                source: \"/images/qr-code.png\",\r\n                width: 25,\r\n                height: 25\r\n            }),\r\n            $$(go.TextBlock, {\r\n                text: \"\",\r\n                font: \"normal normal bold 6px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"right\",\r\n                editable: false,\r\n                width: 65,\r\n                position: new go.Point(31, 2)\r\n            },\r\n            new go.Binding('text', 'name', function (v) {\r\n                if (v === null) return '';\r\n                if (v.length > 15)\r\n                    return v.substring(0, 15);\r\n                return v;\r\n            })),\r\n            $$(go.TextBlock, {\r\n                text: \"Lot:\",\r\n                font: \"normal normal bold 6px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"left\",\r\n                editable: false,\r\n                position: new go.Point(33, 12)\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    text: \"\",\r\n                    font: \"normal normal bold 6px sansserif\",\r\n                    stroke: \"black\",\r\n                    textAlign: \"left\",\r\n                    editable: false,\r\n                    position: new go.Point(52, 12)\r\n                },\r\n                new go.Binding(\"text\", \"lotNumber\", function (v) {\r\n                    if (v === null) return '';\r\n                    if (v.length > 12)\r\n                        return v.substring(0, 12);\r\n                    return v;\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                text: \"EXP:\",\r\n                font: \"normal normal bold 6px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"left\",\r\n                editable: false,\r\n                position: new go.Point(33, 19)\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    text: \"\",\r\n                    font: \"normal normal bold 6px sansserif\",\r\n                    stroke: \"black\",\r\n                    textAlign: \"left\",\r\n                    editable: false,\r\n                    position: new go.Point(52, 19),\r\n                },\r\n                new go.Binding(\"text\", \"expiryDate\", function (v) {\r\n                    if (angular.isDate(v))\r\n                        return moment(v).format('DD/MM/YYYY');\r\n                    return '';\r\n                })\r\n            ),\r\n            $$(go.TextBlock, {\r\n                text: \"SN:\",\r\n                font: \"normal normal bold 6px sansserif\",\r\n                stroke: \"black\",\r\n                textAlign: \"left\",\r\n                editable: false,\r\n                position: new go.Point(33, 26)\r\n            }),\r\n            $$(go.TextBlock, {\r\n                    text: \"\",\r\n                    font: \"normal normal bold 6px sansserif\",\r\n                    stroke: \"black\",\r\n                    textAlign: \"left\",\r\n                    editable: false,\r\n                    position: new go.Point(52, 26)\r\n                },\r\n                new go.Binding(\"text\", \"serializationNumber\", function (v) {\r\n                    if (v === null) return '';\r\n                    if (v.length > 12)\r\n                        return v.substring(0, 12);\r\n                    return v;\r\n                })\r\n            )\r\n        )\r\n    ));    \r\n\r\n    nodeMap.add(\"PhysicalComment\", $$(go.Node, go.Panel.Viewbox, {\r\n            name: \"PhysicalComment\",\r\n            locationSpot: go.Spot.Center,\r\n            width: 70,\r\n            height: 32,\r\n            minSize: new go.Size(17.5, 8),\r\n            scale: 1,\r\n            resizable: false,\r\n            selectionAdorned: true,\r\n            rotatable: false\r\n        },\r\n        new go.Binding(\"location\", \"location\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        new go.Binding('width', 'width').makeTwoWay(),\r\n        new go.Binding('height', 'height').makeTwoWay(),\r\n        new go.Binding('scale', 'scale').makeTwoWay(),\r\n        new go.Binding('angle', 'angle').makeTwoWay(),\r\n            $$(go.Panel, \"Position\",\r\n                $$(go.Shape, {\r\n                        figure: 'Document',\r\n                        fill: '#ffc966',\r\n                        stroke: \"green\",\r\n                        width: 70,\r\n                        height: 32\r\n                    },\r\n                    new go.Binding('fill', 'colour', function(v) {\r\n                        if (v === 'blue') return 'lightblue';\r\n                        else if (v === 'red') return '#ff6666';\r\n                        else if (v === 'green') return 'lightgreen';\r\n                        else if (v === 'orange') return '#ffc966';\r\n                        return 'lightgreen';\r\n                    }),\r\n                    new go.Binding('stroke', 'colour')\r\n                ),\r\n                $$(go.TextBlock, {\r\n                        position: new go.Point(2, 2),\r\n                        width: 70,\r\n                        height: 24,\r\n                        text: '',\r\n                        stroke: 'black',\r\n                        editable: false,\r\n                        textAlign: 'center',\r\n                        font: 'normal normal bold 7px sansserif',\r\n                        wrap: go.TextBlock.WrapFit\r\n                    },\r\n                    new go.Binding('text', 'name')\r\n                )\r\n            )\r\n        )\r\n    );\r\n    diagram.nodeTemplateMap = nodeMap;\r\n    \r\n    // Single click\r\n    diagram.addDiagramListener(\"ObjectSingleClicked\", function(event){\r\n        if(!master) return;\r\n        var part = event.subject.part;\r\n        if(part instanceof go.Part) {\r\n            var nodeData = event.diagram.model.findNodeDataForKey(part.data.key);\r\n            if(!nodeData) return;\r\n            master.postMessage({\r\n                action:'nodeSelected',\r\n                parameters: {\r\n                    category: nodeData.category,\r\n                    id: nodeData.id\r\n                } \r\n            }, window.location.href);\r\n        }\r\n    }); \r\n    \r\n    // Window communication\r\n    var master = null;\r\n    window.addEventListener('message', function(event){\r\n        if(event.data.action === 'setMaster')\r\n            master = event.source;\r\n        else\r\n            messageBus[event.data.action](event.data.parameters);\r\n    }, false);\r\n    \r\n    // Before unloading window - reset\r\n    window.onbeforeunload = function(){\r\n        $.connection.hub.stop();\r\n        if(!master) return;\r\n        master.postMessage({\r\n            action:'windowClosed',\r\n            parameters: window.name\r\n        }, window.location.href);\r\n    }\r\n    \r\n    // Message bus        \r\n    var messageBus = {\r\n        nodeAdded: function(node){\r\n            diagram.model.addNodeData(node);\r\n            node._nodeKey = diagram.model.getKeyForNodeData(node);\r\n            node._node = diagram.findPartForKey(node._nodeKey);\r\n            window.diagram.nodes.push(node);\r\n        },\r\n        nodesAdded: function(nodes){\r\n            for(var i=0; i<nodes.length; i++)\r\n                messageBus.nodeAdded(nodes[i]);\r\n        },\r\n        nodeRemoved: function(parameters){\r\n            var nodes = diagram.model.nodeDataArray.filter(function(node){\r\n                if(node.category === parameters.category && node.name === parameters.name) return true;\r\n                return false;\r\n            });\r\n            if(!nodes.length) return;\r\n            diagram.model.removeNodeData(nodes[0]);\r\n            removeNode(nodes[0]);\r\n        },\r\n        flowAdded: function(parameters){\r\n            var node = findNode(parameters.valveType, parameters.valveId);\r\n            if(!node) return;\r\n            node.flows.push(parameters.flow);\r\n        },\r\n        flowDeleted: function(parameters){\r\n            var node = findNode(parameters.valveType, parameters.valveId);\r\n            if(!node) return;\r\n            var flowIndex = findFlowIndex(node, parameters.flowId);\r\n            if(flowIndex === -1) return;\r\n            node.flows.splice(flowIndex, 1);\r\n        },\r\n        routeChanged: function(parameters){\r\n            var node = findNode(parameters.valveType, parameters.valveId);\r\n            if(!node) return;\r\n            var flow = findFlow(node, parameters.flowId);\r\n            if(!flow) return;\r\n            var routes = flow.routes.filter(function(route){\r\n                if(route.id === parameters.change.id) return true;\r\n                return false;\r\n            });\r\n            if(!routes.length) return;\r\n            routes[0][parameters.change.property] = parameters.change.value;\r\n        }\r\n    }\r\n   \r\n    // Inititlise diagram \r\n    setTimeout(function(){\r\n        var canvas = diagram.div.children[0];        \r\n        loadBackground(diagram, canvas); \r\n        setTimeout(function(){\r\n            loadNodes(); \r\n            loadComments();\r\n        }, 200);      \r\n    }, 500);\r\n\r\n    // Find node\r\n    function findNode(type, id){\r\n        var nodes = diagram.model.nodeDataArray.filter(function(node){\r\n            if(node.category === type && node.id === id) return true;\r\n            return false;\r\n        });\r\n        if(nodes.length)\r\n            return nodes[0];\r\n        return null;\r\n    }\r\n\r\n    // Find flow\r\n    function findFlow(valve, flowId){\r\n        var flows = valve.flows.filter(function(flow){\r\n            if(flow.id === flowId) return true;\r\n            return false;\r\n        });\r\n        if(flows.length)\r\n            return flows[0];\r\n        return null;\r\n    }\r\n\r\n    // Find flow index\r\n    function findFlowIndex(valve, flowId){\r\n        for(var i=0; i<valve.flows.length; i++){\r\n            if(valve.flows[i].id === flowId)\r\n                return i;\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    // Remove node\r\n    function removeNode(node){\r\n        var nodeCount = window.diagram.nodes.length;\r\n        while(nodeCount--){\r\n            if(window.diagram.nodes[nodeCount].category === node.category && window.diagram.nodes[nodeCount].id === node.id)\r\n                window.diagram.nodes.splice(nodeCount, 1);\r\n        }\r\n    }\r\n    \r\n    // Load diagram background\r\n    function loadBackground(diagram, canvas){        \r\n        switch(window.diagram.fileType){\r\n            case 'PNG':\r\n            case 'JPG':\r\n                loadRasterImage(diagram, canvas);\r\n                break;\r\n            case 'SVG':\r\n                loadVectorImage(diagram, canvas);\r\n                break;\r\n            case 'BLANK':\r\n                loadBlank(diagram, canvas);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    // Load raster image - PNG/JPG\r\n    function loadRasterImage(diagram, canvas){\r\n        var img = new Image();\r\n        img.onload = function(){\r\n            diagram.add($$(go.Part, {\r\n                    layerName: 'Background',\r\n                    position: new go.Point(0, 0),\r\n                    selectable: false,\r\n                    pickable: false,\r\n                    resizable: true\r\n                },\r\n                $$(go.Picture, {desiredSize: new go.Size(window.diagram.width, window.diagram.height), element:img, margin:2})\r\n            ));\r\n        }\r\n        img.src = window.diagram.base64;\r\n    }\r\n\r\n    // Load vector image - SVG       \r\n    function loadVectorImage(diagram, canvas){\r\n        // Hack to force the browser to fetch from the server each time, appending unique query string\r\n        var imageSource = window.diagram.baseUrl + window.diagram.path + '?' + (new Date() / 1000);\r\n        diagram.add($$(go.Part, {\r\n                layerName: 'Background',\r\n                position: new go.Point(0, 0),\r\n                selectable: false,\r\n                pickable: false,\r\n                resizable: true\r\n            },\r\n            $$(go.Picture, {desiredSize:new go.Size(window.diagram.width, window.diagram.height), source:imageSource, margin:2})\r\n        ));\r\n    }\r\n    \r\n    // Load blank diagram\r\n    function loadBlank(diagram, canvas){\r\n        canvas.style.backgroundColor = '#E8E8E8';\r\n        canvas.style.width = '100%';\r\n        canvas.style.height = '100%';\r\n    }\r\n    \r\n    // Load nodes\r\n    function loadNodes(){\r\n        for(var n=0; n<window.diagram.nodes.length; n++){\r\n            diagram.model.addNodeData(window.diagram.nodes[n]);\r\n            window.diagram.nodes[n]._nodeKey = diagram.model.getKeyForNodeData(window.diagram.nodes[n]);\r\n            window.diagram.nodes[n]._node = diagram.findPartForKey(window.diagram.nodes[n]._nodeKey);\r\n        }\r\n    }\r\n\r\n    // Load comments\r\n    function loadComments(){\r\n        for(var c=0; c<window.diagram.comments.length; c++){\r\n            diagram.model.addNodeData(window.diagram.comments[c]);\r\n            window.diagram.comments[c]._nodeKey = diagram.model.getKeyForNodeData(window.diagram.comments[c]);\r\n            window.diagram.comments[c]._node = diagram.findPartForKey(window.diagram.comments[c]._nodeKey);\r\n        }\r\n    }\r\n    \r\n    // Window resized event\r\n    window.onresize = function(){\r\n        var div = diagram.div;\r\n        div.style.width = window.innerWidth;\r\n        div.style.width = window.innerHeight;\r\n        diagram.requestUpdate();\r\n    }\r\n    \r\n    // Signalr\r\n    $.connection.hub.qs = { 'access_token': window.accessToken };\r\n    $.connection.hub.url = window.diagram.baseUrl + \"/signalr\";\r\n    $.connection.hub.start();\r\n    $.connection.spikeHub.client.opcDataChange = function(entityType, key, property, value) {\r\n        var nodes = window.diagram.nodes.filter(function(node){\r\n            if(node.category === entityType && node.id === key) return true;\r\n            return false;\r\n        })\r\n        if(!nodes.length) return;\r\n        var node = nodes[0];\r\n        node[property] = value;\r\n        node._node.updateTargetBindings(property);       \r\n    };\r\n\r\n    // Alarms\r\n    var inAlarm = true;\r\n    function interruptHandler(){\r\n        if(!window.diagram.nodes){\r\n            setTimeout(interruptHandler, 500);\r\n            return;\r\n        }\r\n        for(var n=0; n<window.diagram.nodes.length; n++){\r\n            var node = window.diagram.nodes[n];\r\n            if (!node.isInAlarm && node.alarm) {\r\n                node.alarm = false;\r\n                node._node.updateTargetBindings('alarm');\r\n            } else if (node.isInAlarm) {\r\n                node.alarm = inAlarm;\r\n                node._node.updateTargetBindings('alarm');\r\n            }\r\n        }\r\n        inAlarm = !inAlarm;\r\n        setTimeout(interruptHandler, 500);    \r\n    }\r\n    setTimeout(interruptHandler, 500);\r\n    \r\n})();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./external-window/window.js\n// module id = 0\n// module chunks = 3"],"sourceRoot":""}